
ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095d4  080095d4  0000a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080095e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080095f4  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009654  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  240000d0  080096b4  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007ec  080096b4  0000b7ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fd0  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320b  00000000  00000000  000240ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000272e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cae  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038225  00000000  00000000  00028ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae17  00000000  00000000  0006121b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e96f  00000000  00000000  0007c032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da9a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  001da9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001dedd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009378 	.word	0x08009378

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009378 	.word	0x08009378

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f001 fd74 	bl	8002104 <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa87 	bl	8000b34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f008 fe77 	bl	800931e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f002 f8fb 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f002 f8eb 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f002 f8da 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f002 f8c9 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b62      	ldr	r3, [pc, #392]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a51      	ldr	r2, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a42      	ldr	r2, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a3b      	ldr	r2, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ec:	f002 fae8 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008f8:	f002 fae2 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000902:	f002 fadd 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800091c:	f002 f826 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000920:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800093a:	f002 f817 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000958:	f002 f808 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x1b4>)
 8000972:	f001 fffb 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 ffed 	bl	800296c <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020c00 	.word	0x58020c00
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58021800 	.word	0x58021800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fc20 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f83a 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ff1c 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009c4:	f7ff fe00 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 fa0e 	bl	8000de8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009cc:	f000 fb3e 	bl	800104c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80009d0:	f000 f9be 	bl	8000d50 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  //USART3 ENABLE
  USART3->CR1 |= USART_CR1_UE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <main+0x78>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <main+0x78>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
  USART3->CR1 ^= USART_CR1_RE;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <main+0x78>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a11      	ldr	r2, [pc, #68]	@ (8000a2c <main+0x78>)
 80009e6:	f083 0304 	eor.w	r3, r3, #4
 80009ea:	6013      	str	r3, [r2, #0]
  USART3->CR1 |= USART_CR1_TE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <main+0x78>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <main+0x78>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6013      	str	r3, [r2, #0]

  //USART2 ENABLE
  USART2->CR1 |= USART_CR1_UE;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <main+0x7c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <main+0x7c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]
  USART2->CR1 |= USART_CR1_RE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <main+0x7c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <main+0x7c>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6013      	str	r3, [r2, #0]
  USART2->CR1 ^= USART_CR1_TE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <main+0x7c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <main+0x7c>)
 8000a16:	f083 0308 	eor.w	r3, r3, #8
 8000a1a:	6013      	str	r3, [r2, #0]

  USART2->CR1 |= USART_CR1_RXNEIE;	//RX REGISTER NOT EMPTY INTERRUPT
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <main+0x7c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a03      	ldr	r2, [pc, #12]	@ (8000a30 <main+0x7c>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <main+0x74>
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40004400 	.word	0x40004400

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09c      	sub	sp, #112	@ 0x70
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3e:	224c      	movs	r2, #76	@ 0x4c
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 fc6b 	bl	800931e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 fc65 	bl	800931e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f002 fba3 	bl	80031a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <SystemClock_Config+0xf8>)
 8000a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a62:	4a32      	ldr	r2, [pc, #200]	@ (8000b2c <SystemClock_Config+0xf8>)
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a6a:	4b30      	ldr	r3, [pc, #192]	@ (8000b2c <SystemClock_Config+0xf8>)
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <SystemClock_Config+0xfc>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <SystemClock_Config+0xfc>)
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SystemClock_Config+0xfc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a90:	bf00      	nop
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <SystemClock_Config+0xfc>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a9e:	d1f8      	bne.n	8000a92 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	@ 0x40
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000abe:	2318      	movs	r3, #24
 8000ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fbb4 	bl	800324c <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000aea:	f000 f823 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	233f      	movs	r3, #63	@ 0x3f
 8000af0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2101      	movs	r1, #1
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f94a 	bl	8003dac <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b1e:	f000 f809 	bl	8000b34 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3770      	adds	r7, #112	@ 0x70
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	58000400 	.word	0x58000400
 8000b30:	58024800 	.word	0x58024800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b64:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58024400 	.word	0x58024400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 fb7d 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if((bool)(USART3->ISR & USART_ISR_TXE_TXFNF)){
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <USART2_IRQHandler+0x48>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d009      	beq.n	8000c10 <USART2_IRQHandler+0x24>
		USART3->CR1 |= USART_CR1_TE;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <USART2_IRQHandler+0x48>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <USART2_IRQHandler+0x48>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6013      	str	r3, [r2, #0]
		USART3->TDR = USART2->RDR;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <USART2_IRQHandler+0x4c>)
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <USART2_IRQHandler+0x48>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0e:	6293      	str	r3, [r2, #40]	@ 0x28
	}
  /* USER CODE END USART2_IRQn 0 */

  HAL_UART_IRQHandler(&huart2);
 8000c10:	480a      	ldr	r0, [pc, #40]	@ (8000c3c <USART2_IRQHandler+0x50>)
 8000c12:	f006 f915 	bl	8006e40 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART2_IRQn 1 */

	USART2->CR1 |= USART_CR1_RE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <USART2_IRQHandler+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <USART2_IRQHandler+0x4c>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <USART2_IRQHandler+0x4c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <USART2_IRQHandler+0x4c>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004800 	.word	0x40004800
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	240001dc 	.word	0x240001dc

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemInit+0xe4>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <SystemInit+0xe4>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <SystemInit+0xe8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d807      	bhi.n	8000c70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <SystemInit+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 030f 	bic.w	r3, r3, #15
 8000c68:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <SystemInit+0xe8>)
 8000c6a:	f043 0307 	orr.w	r3, r3, #7
 8000c6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <SystemInit+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <SystemInit+0xec>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <SystemInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <SystemInit+0xec>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4929      	ldr	r1, [pc, #164]	@ (8000d2c <SystemInit+0xec>)
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xf0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <SystemInit+0xe8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <SystemInit+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <SystemInit+0xe8>)
 8000ca4:	f043 0307 	orr.w	r3, r3, #7
 8000ca8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <SystemInit+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <SystemInit+0xec>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <SystemInit+0xec>)
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <SystemInit+0xf4>)
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <SystemInit+0xec>)
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <SystemInit+0xf8>)
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <SystemInit+0xec>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <SystemInit+0xfc>)
 8000ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <SystemInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <SystemInit+0xec>)
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <SystemInit+0xfc>)
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <SystemInit+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <SystemInit+0xec>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <SystemInit+0xfc>)
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <SystemInit+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <SystemInit+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <SystemInit+0xec>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <SystemInit+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <SystemInit+0x100>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <SystemInit+0x104>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d0a:	d202      	bcs.n	8000d12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x108>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <SystemInit+0x10c>)
 8000d14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	5c001000 	.word	0x5c001000
 8000d44:	ffff0000 	.word	0xffff0000
 8000d48:	51008108 	.word	0x51008108
 8000d4c:	52004000 	.word	0x52004000

08000d50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d56:	4a23      	ldr	r2, [pc, #140]	@ (8000de4 <MX_USART2_UART_Init+0x94>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d98:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000d9a:	f005 ff83 	bl	8006ca4 <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000da4:	f7ff fec6 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000dac:	f007 fe2e 	bl	8008a0c <HAL_UARTEx_SetTxFifoThreshold>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000db6:	f7ff febd 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000dbe:	f007 febf 	bl	8008b40 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc8:	f7ff feb4 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_USART2_UART_Init+0x90>)
 8000dce:	f007 fda7 	bl	8008920 <HAL_UARTEx_DisableFifoMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f7ff feac 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240001dc 	.word	0x240001dc
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	@ (8000e7c <MX_USART3_UART_Init+0x94>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e32:	f005 ff37 	bl	8006ca4 <HAL_UART_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f7ff fe7a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e44:	f007 fde2 	bl	8008a0c <HAL_UARTEx_SetTxFifoThreshold>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4e:	f7ff fe71 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4808      	ldr	r0, [pc, #32]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e56:	f007 fe73 	bl	8008b40 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f7ff fe68 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e66:	f007 fd5b 	bl	8008920 <HAL_UARTEx_DisableFifoMode>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f7ff fe60 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	24000270 	.word	0x24000270
 8000e7c:	40004800 	.word	0x40004800

08000e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0be      	sub	sp, #248	@ 0xf8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	22c0      	movs	r2, #192	@ 0xc0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f008 fa3c 	bl	800931e <memset>
  if(uartHandle->Instance==USART2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a63      	ldr	r2, [pc, #396]	@ (8001038 <HAL_UART_MspInit+0x1b8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d172      	bne.n	8000f96 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb0:	f04f 0202 	mov.w	r2, #2
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fcb6 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ed2:	f7ff fe2f 	bl	8000b34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed6:	4b59      	ldr	r3, [pc, #356]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000edc:	4a57      	ldr	r2, [pc, #348]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ee6:	4b55      	ldr	r3, [pc, #340]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b51      	ldr	r3, [pc, #324]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a50      	ldr	r2, [pc, #320]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b4d      	ldr	r3, [pc, #308]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	4a48      	ldr	r2, [pc, #288]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f22:	4b46      	ldr	r3, [pc, #280]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f30:	2308      	movs	r3, #8
 8000f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f52:	4619      	mov	r1, r3
 8000f54:	483a      	ldr	r0, [pc, #232]	@ (8001040 <HAL_UART_MspInit+0x1c0>)
 8000f56:	f001 fd09 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4831      	ldr	r0, [pc, #196]	@ (8001044 <HAL_UART_MspInit+0x1c4>)
 8000f80:	f001 fcf4 	bl	800296c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2026      	movs	r0, #38	@ 0x26
 8000f8a:	f000 fb09 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f8e:	2026      	movs	r0, #38	@ 0x26
 8000f90:	f000 fb30 	bl	80015f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f94:	e04b      	b.n	800102e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001048 <HAL_UART_MspInit+0x1c8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d146      	bne.n	800102e <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fa0:	f04f 0202 	mov.w	r2, #2
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fc3e 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8000fc2:	f7ff fdb7 	bl	8000b34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a14      	ldr	r2, [pc, #80]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_UART_MspInit+0x1bc>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	2307      	movs	r3, #7
 800101e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	@ (8001044 <HAL_UART_MspInit+0x1c4>)
 800102a:	f001 fc9f 	bl	800296c <HAL_GPIO_Init>
}
 800102e:	bf00      	nop
 8001030:	37f8      	adds	r7, #248	@ 0xf8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	58024400 	.word	0x58024400
 8001040:	58020000 	.word	0x58020000
 8001044:	58020c00 	.word	0x58020c00
 8001048:	40004800 	.word	0x40004800

0800104c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001052:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001054:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001058:	2209      	movs	r2, #9
 800105a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800105e:	2202      	movs	r2, #2
 8001060:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001064:	2200      	movs	r2, #0
 8001066:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106a:	2202      	movs	r2, #2
 800106c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001070:	2201      	movs	r2, #1
 8001072:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800107c:	2200      	movs	r2, #0
 800107e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001082:	2201      	movs	r2, #1
 8001084:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001088:	2201      	movs	r2, #1
 800108a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800108e:	2200      	movs	r2, #0
 8001090:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001094:	f001 ff40 	bl	8002f18 <HAL_PCD_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800109e:	f7ff fd49 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	24000304 	.word	0x24000304
 80010ac:	40080000 	.word	0x40080000

080010b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ba      	sub	sp, #232	@ 0xe8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	22c0      	movs	r2, #192	@ 0xc0
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f008 f924 	bl	800931e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a30      	ldr	r2, [pc, #192]	@ (800119c <HAL_PCD_MspInit+0xec>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d159      	bne.n	8001194 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fb9d 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001104:	f7ff fd16 	bl	8000b34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001108:	f002 f890 	bl	800322c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800112a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800112e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001144:	230a      	movs	r3, #10
 8001146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800114e:	4619      	mov	r1, r3
 8001150:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <HAL_PCD_MspInit+0xf4>)
 8001152:	f001 fc0b 	bl	800296c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <HAL_PCD_MspInit+0xf4>)
 8001172:	f001 fbfb 	bl	800296c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 8001178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800117c:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 800117e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001182:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_PCD_MspInit+0xf0>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800118c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	37e8      	adds	r7, #232	@ 0xe8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40080000 	.word	0x40080000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020000 	.word	0x58020000

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ac:	f7ff fd48 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f008 f8ab 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fbeb 	bl	80009b4 <main>
  bx  lr
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011ec:	080095e4 	.word	0x080095e4
  ldr r2, =_sbss
 80011f0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80011f4:	240007ec 	.word	0x240007ec

080011f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC3_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001202:	2003      	movs	r0, #3
 8001204:	f000 f9ac 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001208:	f003 f940 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_Init+0x68>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	4913      	ldr	r1, [pc, #76]	@ (8001268 <HAL_Init+0x6c>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_Init+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <HAL_Init+0x6c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <HAL_Init+0x70>)
 800123e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001240:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <HAL_Init+0x74>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f814 	bl	8001274 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e002      	b.n	800125c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001256:	f7ff fc7f 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	58024400 	.word	0x58024400
 8001268:	0800959c 	.word	0x0800959c
 800126c:	24000004 	.word	0x24000004
 8001270:	24000000 	.word	0x24000000

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_InitTick+0x60>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e021      	b.n	80012cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_InitTick+0x64>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_InitTick+0x60>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f9c0 	bl	8001624 <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f970 	bl	80015a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_InitTick+0x68>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2400000c 	.word	0x2400000c
 80012d8:	24000000 	.word	0x24000000
 80012dc:	24000008 	.word	0x24000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2400000c 	.word	0x2400000c
 8001304:	240007e8 	.word	0x240007e8

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	240007e8 	.word	0x240007e8

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2400000c 	.word	0x2400000c

08001368 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetREVID+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0c1b      	lsrs	r3, r3, #16
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	5c001000 	.word	0x5c001000

08001380 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001394:	d004      	beq.n	80013a0 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001396:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 800139a:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 800139c:	f7ff fbd0 	bl	8000b40 <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013a8:	4904      	ldr	r1, [pc, #16]	@ (80013bc <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08009390 	.word	0x08009390
 80013bc:	58000400 	.word	0x58000400

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	05fa0000 	.word	0x05fa0000

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	@ (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	@ (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d00f      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b06      	cmp	r3, #6
 8001572:	d00c      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d009      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d006      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d003      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001586:	2191      	movs	r1, #145	@ 0x91
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800158a:	f7ff fad9 	bl	8000b40 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff16 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	080093c4 	.word	0x080093c4

080015a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d903      	bls.n	80015bc <HAL_NVIC_SetPriority+0x1c>
 80015b4:	21a9      	movs	r1, #169	@ 0xa9
 80015b6:	480e      	ldr	r0, [pc, #56]	@ (80015f0 <HAL_NVIC_SetPriority+0x50>)
 80015b8:	f7ff fac2 	bl	8000b40 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	d903      	bls.n	80015ca <HAL_NVIC_SetPriority+0x2a>
 80015c2:	21aa      	movs	r1, #170	@ 0xaa
 80015c4:	480a      	ldr	r0, [pc, #40]	@ (80015f0 <HAL_NVIC_SetPriority+0x50>)
 80015c6:	f7ff fabb 	bl	8000b40 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ca:	f7ff ff1d 	bl	8001408 <__NVIC_GetPriorityGrouping>
 80015ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7ff ff6d 	bl	80014b4 <NVIC_EncodePriority>
 80015da:	4602      	mov	r2, r0
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff3c 	bl	8001460 <__NVIC_SetPriority>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	080093c4 	.word	0x080093c4

080015f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da03      	bge.n	800160e <HAL_NVIC_EnableIRQ+0x1a>
 8001606:	21bd      	movs	r1, #189	@ 0xbd
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_NVIC_EnableIRQ+0x2c>)
 800160a:	f7ff fa99 	bl	8000b40 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff06 	bl	8001424 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	080093c4 	.word	0x080093c4

08001624 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff75 	bl	800151c <SysTick_Config>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fe60 	bl	8001308 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2dc      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e2cd      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a76      	ldr	r2, [pc, #472]	@ (8001850 <HAL_DMA_Abort+0x214>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04a      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a74      	ldr	r2, [pc, #464]	@ (8001854 <HAL_DMA_Abort+0x218>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d045      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a73      	ldr	r2, [pc, #460]	@ (8001858 <HAL_DMA_Abort+0x21c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d040      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a71      	ldr	r2, [pc, #452]	@ (800185c <HAL_DMA_Abort+0x220>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d03b      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a70      	ldr	r2, [pc, #448]	@ (8001860 <HAL_DMA_Abort+0x224>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d036      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001864 <HAL_DMA_Abort+0x228>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6d      	ldr	r2, [pc, #436]	@ (8001868 <HAL_DMA_Abort+0x22c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d02c      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6b      	ldr	r2, [pc, #428]	@ (800186c <HAL_DMA_Abort+0x230>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d027      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <HAL_DMA_Abort+0x234>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a68      	ldr	r2, [pc, #416]	@ (8001874 <HAL_DMA_Abort+0x238>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01d      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a67      	ldr	r2, [pc, #412]	@ (8001878 <HAL_DMA_Abort+0x23c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d018      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a65      	ldr	r2, [pc, #404]	@ (800187c <HAL_DMA_Abort+0x240>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a64      	ldr	r2, [pc, #400]	@ (8001880 <HAL_DMA_Abort+0x244>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00e      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a62      	ldr	r2, [pc, #392]	@ (8001884 <HAL_DMA_Abort+0x248>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d009      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a61      	ldr	r2, [pc, #388]	@ (8001888 <HAL_DMA_Abort+0x24c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5f      	ldr	r2, [pc, #380]	@ (800188c <HAL_DMA_Abort+0x250>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Abort+0xda>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_DMA_Abort+0xdc>
 8001716:	2300      	movs	r3, #0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 021e 	bic.w	r2, r2, #30
 800172a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800173a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020e 	bic.w	r2, r2, #14
 8001752:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3c      	ldr	r2, [pc, #240]	@ (8001850 <HAL_DMA_Abort+0x214>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d072      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3a      	ldr	r2, [pc, #232]	@ (8001854 <HAL_DMA_Abort+0x218>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d06d      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a39      	ldr	r2, [pc, #228]	@ (8001858 <HAL_DMA_Abort+0x21c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d068      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	@ (800185c <HAL_DMA_Abort+0x220>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d063      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a36      	ldr	r2, [pc, #216]	@ (8001860 <HAL_DMA_Abort+0x224>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <HAL_DMA_Abort+0x228>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d059      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	@ (8001868 <HAL_DMA_Abort+0x22c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d054      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	@ (800186c <HAL_DMA_Abort+0x230>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d04f      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <HAL_DMA_Abort+0x234>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04a      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001874 <HAL_DMA_Abort+0x238>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d045      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <HAL_DMA_Abort+0x23c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d040      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <HAL_DMA_Abort+0x240>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d03b      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001880 <HAL_DMA_Abort+0x244>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d036      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_DMA_Abort+0x248>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d031      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_DMA_Abort+0x24c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d02c      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	@ (800188c <HAL_DMA_Abort+0x250>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d027      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a24      	ldr	r2, [pc, #144]	@ (8001890 <HAL_DMA_Abort+0x254>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <HAL_DMA_Abort+0x258>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01d      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <HAL_DMA_Abort+0x25c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d018      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <HAL_DMA_Abort+0x260>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1e      	ldr	r2, [pc, #120]	@ (80018a0 <HAL_DMA_Abort+0x264>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00e      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <HAL_DMA_Abort+0x268>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d009      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <HAL_DMA_Abort+0x26c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_DMA_Abort+0x270>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d132      	bne.n	80018b0 <HAL_DMA_Abort+0x274>
 800184a:	2301      	movs	r3, #1
 800184c:	e031      	b.n	80018b2 <HAL_DMA_Abort+0x276>
 800184e:	bf00      	nop
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
 8001890:	58025408 	.word	0x58025408
 8001894:	5802541c 	.word	0x5802541c
 8001898:	58025430 	.word	0x58025430
 800189c:	58025444 	.word	0x58025444
 80018a0:	58025458 	.word	0x58025458
 80018a4:	5802546c 	.word	0x5802546c
 80018a8:	58025480 	.word	0x58025480
 80018ac:	58025494 	.word	0x58025494
 80018b0:	2300      	movs	r3, #0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6d      	ldr	r2, [pc, #436]	@ (8001a80 <HAL_DMA_Abort+0x444>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04a      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a84 <HAL_DMA_Abort+0x448>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d045      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6a      	ldr	r2, [pc, #424]	@ (8001a88 <HAL_DMA_Abort+0x44c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d040      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a68      	ldr	r2, [pc, #416]	@ (8001a8c <HAL_DMA_Abort+0x450>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d03b      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a67      	ldr	r2, [pc, #412]	@ (8001a90 <HAL_DMA_Abort+0x454>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d036      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_DMA_Abort+0x458>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d031      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a64      	ldr	r2, [pc, #400]	@ (8001a98 <HAL_DMA_Abort+0x45c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d02c      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a62      	ldr	r2, [pc, #392]	@ (8001a9c <HAL_DMA_Abort+0x460>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d027      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a61      	ldr	r2, [pc, #388]	@ (8001aa0 <HAL_DMA_Abort+0x464>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa4 <HAL_DMA_Abort+0x468>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01d      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	@ (8001aa8 <HAL_DMA_Abort+0x46c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d018      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	@ (8001aac <HAL_DMA_Abort+0x470>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab0 <HAL_DMA_Abort+0x474>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a59      	ldr	r2, [pc, #356]	@ (8001ab4 <HAL_DMA_Abort+0x478>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_DMA_Abort+0x47c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a56      	ldr	r2, [pc, #344]	@ (8001abc <HAL_DMA_Abort+0x480>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d108      	bne.n	8001978 <HAL_DMA_Abort+0x33c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e007      	b.n	8001988 <HAL_DMA_Abort+0x34c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001988:	e013      	b.n	80019b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fcbd 	bl	8001308 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d90c      	bls.n	80019b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e12d      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1e5      	bne.n	800198a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <HAL_DMA_Abort+0x444>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04a      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a84 <HAL_DMA_Abort+0x448>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d045      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <HAL_DMA_Abort+0x44c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d040      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a8c <HAL_DMA_Abort+0x450>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d03b      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <HAL_DMA_Abort+0x454>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d036      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <HAL_DMA_Abort+0x458>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d031      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a26      	ldr	r2, [pc, #152]	@ (8001a98 <HAL_DMA_Abort+0x45c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d02c      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <HAL_DMA_Abort+0x460>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d027      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a23      	ldr	r2, [pc, #140]	@ (8001aa0 <HAL_DMA_Abort+0x464>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <HAL_DMA_Abort+0x468>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01d      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_DMA_Abort+0x46c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d018      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <HAL_DMA_Abort+0x470>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_DMA_Abort+0x474>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_DMA_Abort+0x478>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d009      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab8 <HAL_DMA_Abort+0x47c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <HAL_DMA_Abort+0x480>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA_Abort+0x426>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_Abort+0x428>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02b      	beq.n	8001ac0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	223f      	movs	r2, #63	@ 0x3f
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e02a      	b.n	8001ad6 <HAL_DMA_Abort+0x49a>
 8001a80:	40020010 	.word	0x40020010
 8001a84:	40020028 	.word	0x40020028
 8001a88:	40020040 	.word	0x40020040
 8001a8c:	40020058 	.word	0x40020058
 8001a90:	40020070 	.word	0x40020070
 8001a94:	40020088 	.word	0x40020088
 8001a98:	400200a0 	.word	0x400200a0
 8001a9c:	400200b8 	.word	0x400200b8
 8001aa0:	40020410 	.word	0x40020410
 8001aa4:	40020428 	.word	0x40020428
 8001aa8:	40020440 	.word	0x40020440
 8001aac:	40020458 	.word	0x40020458
 8001ab0:	40020470 	.word	0x40020470
 8001ab4:	40020488 	.word	0x40020488
 8001ab8:	400204a0 	.word	0x400204a0
 8001abc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2201      	movs	r2, #1
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	@ (8001c18 <HAL_DMA_Abort+0x5dc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d072      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_DMA_Abort+0x5e0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d06d      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_DMA_Abort+0x5e4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d068      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_DMA_Abort+0x5e8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d063      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_DMA_Abort+0x5ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <HAL_DMA_Abort+0x5f0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d059      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_DMA_Abort+0x5f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d054      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a44      	ldr	r2, [pc, #272]	@ (8001c34 <HAL_DMA_Abort+0x5f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d04f      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	@ (8001c38 <HAL_DMA_Abort+0x5fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d04a      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a41      	ldr	r2, [pc, #260]	@ (8001c3c <HAL_DMA_Abort+0x600>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d045      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	@ (8001c40 <HAL_DMA_Abort+0x604>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d040      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3e      	ldr	r2, [pc, #248]	@ (8001c44 <HAL_DMA_Abort+0x608>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d03b      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	@ (8001c48 <HAL_DMA_Abort+0x60c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d036      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <HAL_DMA_Abort+0x610>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d031      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3a      	ldr	r2, [pc, #232]	@ (8001c50 <HAL_DMA_Abort+0x614>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <HAL_DMA_Abort+0x618>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d027      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a37      	ldr	r2, [pc, #220]	@ (8001c58 <HAL_DMA_Abort+0x61c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a35      	ldr	r2, [pc, #212]	@ (8001c5c <HAL_DMA_Abort+0x620>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a34      	ldr	r2, [pc, #208]	@ (8001c60 <HAL_DMA_Abort+0x624>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_DMA_Abort+0x628>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a31      	ldr	r2, [pc, #196]	@ (8001c68 <HAL_DMA_Abort+0x62c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00e      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2f      	ldr	r2, [pc, #188]	@ (8001c6c <HAL_DMA_Abort+0x630>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c70 <HAL_DMA_Abort+0x634>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c74 <HAL_DMA_Abort+0x638>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Abort+0x58e>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_Abort+0x590>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40020010 	.word	0x40020010
 8001c1c:	40020028 	.word	0x40020028
 8001c20:	40020040 	.word	0x40020040
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40020088 	.word	0x40020088
 8001c30:	400200a0 	.word	0x400200a0
 8001c34:	400200b8 	.word	0x400200b8
 8001c38:	40020410 	.word	0x40020410
 8001c3c:	40020428 	.word	0x40020428
 8001c40:	40020440 	.word	0x40020440
 8001c44:	40020458 	.word	0x40020458
 8001c48:	40020470 	.word	0x40020470
 8001c4c:	40020488 	.word	0x40020488
 8001c50:	400204a0 	.word	0x400204a0
 8001c54:	400204b8 	.word	0x400204b8
 8001c58:	58025408 	.word	0x58025408
 8001c5c:	5802541c 	.word	0x5802541c
 8001c60:	58025430 	.word	0x58025430
 8001c64:	58025444 	.word	0x58025444
 8001c68:	58025458 	.word	0x58025458
 8001c6c:	5802546c 	.word	0x5802546c
 8001c70:	58025480 	.word	0x58025480
 8001c74:	58025494 	.word	0x58025494

08001c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e237      	b.n	80020fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2280      	movs	r2, #128	@ 0x80
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e22c      	b.n	80020fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <HAL_DMA_Abort_IT+0x1a0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04a      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a5b      	ldr	r2, [pc, #364]	@ (8001e1c <HAL_DMA_Abort_IT+0x1a4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d045      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a59      	ldr	r2, [pc, #356]	@ (8001e20 <HAL_DMA_Abort_IT+0x1a8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d040      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a58      	ldr	r2, [pc, #352]	@ (8001e24 <HAL_DMA_Abort_IT+0x1ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d03b      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a56      	ldr	r2, [pc, #344]	@ (8001e28 <HAL_DMA_Abort_IT+0x1b0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a55      	ldr	r2, [pc, #340]	@ (8001e2c <HAL_DMA_Abort_IT+0x1b4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	@ (8001e30 <HAL_DMA_Abort_IT+0x1b8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02c      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a52      	ldr	r2, [pc, #328]	@ (8001e34 <HAL_DMA_Abort_IT+0x1bc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	@ (8001e38 <HAL_DMA_Abort_IT+0x1c0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8001e3c <HAL_DMA_Abort_IT+0x1c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01d      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4d      	ldr	r2, [pc, #308]	@ (8001e40 <HAL_DMA_Abort_IT+0x1c8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a4c      	ldr	r2, [pc, #304]	@ (8001e44 <HAL_DMA_Abort_IT+0x1cc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_DMA_Abort_IT+0x1d0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a49      	ldr	r2, [pc, #292]	@ (8001e4c <HAL_DMA_Abort_IT+0x1d4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a47      	ldr	r2, [pc, #284]	@ (8001e50 <HAL_DMA_Abort_IT+0x1d8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a46      	ldr	r2, [pc, #280]	@ (8001e54 <HAL_DMA_Abort_IT+0x1dc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Abort_IT+0xcc>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Abort_IT+0xce>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8086 	beq.w	8001e58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <HAL_DMA_Abort_IT+0x1a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d04a      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <HAL_DMA_Abort_IT+0x1a4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d045      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <HAL_DMA_Abort_IT+0x1a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d040      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2b      	ldr	r2, [pc, #172]	@ (8001e24 <HAL_DMA_Abort_IT+0x1ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d03b      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_DMA_Abort_IT+0x1b0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d036      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a28      	ldr	r2, [pc, #160]	@ (8001e2c <HAL_DMA_Abort_IT+0x1b4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d031      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a26      	ldr	r2, [pc, #152]	@ (8001e30 <HAL_DMA_Abort_IT+0x1b8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02c      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <HAL_DMA_Abort_IT+0x1bc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d027      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <HAL_DMA_Abort_IT+0x1c0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a22      	ldr	r2, [pc, #136]	@ (8001e3c <HAL_DMA_Abort_IT+0x1c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_DMA_Abort_IT+0x1c8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_DMA_Abort_IT+0x1cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_DMA_Abort_IT+0x1d0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_DMA_Abort_IT+0x1d4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <HAL_DMA_Abort_IT+0x1d8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x17c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a19      	ldr	r2, [pc, #100]	@ (8001e54 <HAL_DMA_Abort_IT+0x1dc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <HAL_DMA_Abort_IT+0x18e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e178      	b.n	80020f8 <HAL_DMA_Abort_IT+0x480>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e16f      	b.n	80020f8 <HAL_DMA_Abort_IT+0x480>
 8001e18:	40020010 	.word	0x40020010
 8001e1c:	40020028 	.word	0x40020028
 8001e20:	40020040 	.word	0x40020040
 8001e24:	40020058 	.word	0x40020058
 8001e28:	40020070 	.word	0x40020070
 8001e2c:	40020088 	.word	0x40020088
 8001e30:	400200a0 	.word	0x400200a0
 8001e34:	400200b8 	.word	0x400200b8
 8001e38:	40020410 	.word	0x40020410
 8001e3c:	40020428 	.word	0x40020428
 8001e40:	40020440 	.word	0x40020440
 8001e44:	40020458 	.word	0x40020458
 8001e48:	40020470 	.word	0x40020470
 8001e4c:	40020488 	.word	0x40020488
 8001e50:	400204a0 	.word	0x400204a0
 8001e54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020e 	bic.w	r2, r2, #14
 8001e66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6c      	ldr	r2, [pc, #432]	@ (8002020 <HAL_DMA_Abort_IT+0x3a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d04a      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6b      	ldr	r2, [pc, #428]	@ (8002024 <HAL_DMA_Abort_IT+0x3ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d045      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_DMA_Abort_IT+0x3b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d040      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a68      	ldr	r2, [pc, #416]	@ (800202c <HAL_DMA_Abort_IT+0x3b4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d03b      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a66      	ldr	r2, [pc, #408]	@ (8002030 <HAL_DMA_Abort_IT+0x3b8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d036      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a65      	ldr	r2, [pc, #404]	@ (8002034 <HAL_DMA_Abort_IT+0x3bc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d031      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a63      	ldr	r2, [pc, #396]	@ (8002038 <HAL_DMA_Abort_IT+0x3c0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02c      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a62      	ldr	r2, [pc, #392]	@ (800203c <HAL_DMA_Abort_IT+0x3c4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d027      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a60      	ldr	r2, [pc, #384]	@ (8002040 <HAL_DMA_Abort_IT+0x3c8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d022      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5f      	ldr	r2, [pc, #380]	@ (8002044 <HAL_DMA_Abort_IT+0x3cc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01d      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5d      	ldr	r2, [pc, #372]	@ (8002048 <HAL_DMA_Abort_IT+0x3d0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d018      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	@ (800204c <HAL_DMA_Abort_IT+0x3d4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5a      	ldr	r2, [pc, #360]	@ (8002050 <HAL_DMA_Abort_IT+0x3d8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00e      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a59      	ldr	r2, [pc, #356]	@ (8002054 <HAL_DMA_Abort_IT+0x3dc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	@ (8002058 <HAL_DMA_Abort_IT+0x3e0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x290>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a56      	ldr	r2, [pc, #344]	@ (800205c <HAL_DMA_Abort_IT+0x3e4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <HAL_DMA_Abort_IT+0x2a2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_DMA_Abort_IT+0x2b2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002020 <HAL_DMA_Abort_IT+0x3a8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d072      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3a      	ldr	r2, [pc, #232]	@ (8002024 <HAL_DMA_Abort_IT+0x3ac>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d06d      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a39      	ldr	r2, [pc, #228]	@ (8002028 <HAL_DMA_Abort_IT+0x3b0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d068      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a37      	ldr	r2, [pc, #220]	@ (800202c <HAL_DMA_Abort_IT+0x3b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d063      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a36      	ldr	r2, [pc, #216]	@ (8002030 <HAL_DMA_Abort_IT+0x3b8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d05e      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a34      	ldr	r2, [pc, #208]	@ (8002034 <HAL_DMA_Abort_IT+0x3bc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d059      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a33      	ldr	r2, [pc, #204]	@ (8002038 <HAL_DMA_Abort_IT+0x3c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d054      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a31      	ldr	r2, [pc, #196]	@ (800203c <HAL_DMA_Abort_IT+0x3c4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04f      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a30      	ldr	r2, [pc, #192]	@ (8002040 <HAL_DMA_Abort_IT+0x3c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d04a      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	@ (8002044 <HAL_DMA_Abort_IT+0x3cc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d045      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2d      	ldr	r2, [pc, #180]	@ (8002048 <HAL_DMA_Abort_IT+0x3d0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d040      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <HAL_DMA_Abort_IT+0x3d4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d03b      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8002050 <HAL_DMA_Abort_IT+0x3d8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d036      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <HAL_DMA_Abort_IT+0x3dc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d031      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <HAL_DMA_Abort_IT+0x3e0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d02c      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	@ (800205c <HAL_DMA_Abort_IT+0x3e4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d027      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a24      	ldr	r2, [pc, #144]	@ (8002060 <HAL_DMA_Abort_IT+0x3e8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d022      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <HAL_DMA_Abort_IT+0x3ec>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <HAL_DMA_Abort_IT+0x3f0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_DMA_Abort_IT+0x3f4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_DMA_Abort_IT+0x3f8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_DMA_Abort_IT+0x3fc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_DMA_Abort_IT+0x400>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_DMA_Abort_IT+0x3a2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <HAL_DMA_Abort_IT+0x404>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d132      	bne.n	8002080 <HAL_DMA_Abort_IT+0x408>
 800201a:	2301      	movs	r3, #1
 800201c:	e031      	b.n	8002082 <HAL_DMA_Abort_IT+0x40a>
 800201e:	bf00      	nop
 8002020:	40020010 	.word	0x40020010
 8002024:	40020028 	.word	0x40020028
 8002028:	40020040 	.word	0x40020040
 800202c:	40020058 	.word	0x40020058
 8002030:	40020070 	.word	0x40020070
 8002034:	40020088 	.word	0x40020088
 8002038:	400200a0 	.word	0x400200a0
 800203c:	400200b8 	.word	0x400200b8
 8002040:	40020410 	.word	0x40020410
 8002044:	40020428 	.word	0x40020428
 8002048:	40020440 	.word	0x40020440
 800204c:	40020458 	.word	0x40020458
 8002050:	40020470 	.word	0x40020470
 8002054:	40020488 	.word	0x40020488
 8002058:	400204a0 	.word	0x400204a0
 800205c:	400204b8 	.word	0x400204b8
 8002060:	58025408 	.word	0x58025408
 8002064:	5802541c 	.word	0x5802541c
 8002068:	58025430 	.word	0x58025430
 800206c:	58025444 	.word	0x58025444
 8002070:	58025458 	.word	0x58025458
 8002074:	5802546c 	.word	0x5802546c
 8002078:	58025480 	.word	0x58025480
 800207c:	58025494 	.word	0x58025494
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d028      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002094:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2201      	movs	r2, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop

08002104 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0e3      	b.n	80022de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2223      	movs	r2, #35	@ 0x23
 8002124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fa99 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b6e      	ldr	r3, [pc, #440]	@ (80022e8 <HAL_ETH_Init+0x1e4>)
 8002130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002134:	4a6c      	ldr	r2, [pc, #432]	@ (80022e8 <HAL_ETH_Init+0x1e4>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800213e:	4b6a      	ldr	r3, [pc, #424]	@ (80022e8 <HAL_ETH_Init+0x1e4>)
 8002140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7a1b      	ldrb	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f913 	bl	8001380 <HAL_SYSCFG_ETHInterfaceSelect>
 800215a:	e003      	b.n	8002164 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800215c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002160:	f7ff f90e 	bl	8001380 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002164:	4b61      	ldr	r3, [pc, #388]	@ (80022ec <HAL_ETH_Init+0x1e8>)
 8002166:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800217e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff f8c2 	bl	8001308 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002186:	e011      	b.n	80021ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002188:	f7ff f8be 	bl	8001308 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002196:	d909      	bls.n	80021ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	22e0      	movs	r2, #224	@ 0xe0
 80021a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e098      	b.n	80022de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e4      	bne.n	8002188 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f89e 	bl	8002300 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021c4:	f002 fadc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a49      	ldr	r2, [pc, #292]	@ (80022f0 <HAL_ETH_Init+0x1ec>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0c9a      	lsrs	r2, r3, #18
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3a01      	subs	r2, #1
 80021d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fa81 	bl	80026e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021ee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021fe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	22e0      	movs	r2, #224	@ 0xe0
 800221a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e05d      	b.n	80022de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800222a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800222e:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <HAL_ETH_Init+0x1f0>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6952      	ldr	r2, [r2, #20]
 8002236:	0051      	lsls	r1, r2, #1
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002242:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fae9 	bl	800281e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb2f 	bl	80028b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	3305      	adds	r3, #5
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	3303      	adds	r3, #3
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	061a      	lsls	r2, r3, #24
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	3302      	adds	r3, #2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002290:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800229e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_ETH_Init+0x1f4>)
 80022b2:	430b      	orrs	r3, r1
 80022b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <HAL_ETH_Init+0x1f8>)
 80022c6:	430b      	orrs	r3, r1
 80022c8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2210      	movs	r2, #16
 80022d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58000400 	.word	0x58000400
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	ffff8001 	.word	0xffff8001
 80022f8:	0c020060 	.word	0x0c020060
 80022fc:	0c20c000 	.word	0x0c20c000

08002300 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002310:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002318:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800231a:	f002 fa31 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 800231e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4a1a      	ldr	r2, [pc, #104]	@ (800238c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d804      	bhi.n	8002332 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e022      	b.n	8002378 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d204      	bcs.n	8002344 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e019      	b.n	8002378 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d915      	bls.n	8002378 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d804      	bhi.n	800235e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d804      	bhi.n	8002370 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e003      	b.n	8002378 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002376:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	02160ebf 	.word	0x02160ebf
 8002390:	03938700 	.word	0x03938700
 8002394:	05f5e0ff 	.word	0x05f5e0ff
 8002398:	08f0d17f 	.word	0x08f0d17f
 800239c:	0ee6b27f 	.word	0x0ee6b27f

080023a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80023b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b1b      	ldrb	r3, [r3, #12]
 80023c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7b5b      	ldrb	r3, [r3, #13]
 80023c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7b9b      	ldrb	r3, [r3, #14]
 80023d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7bdb      	ldrb	r3, [r3, #15]
 80023d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	7c12      	ldrb	r2, [r2, #16]
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d102      	bne.n	80023ea <ETH_SetMACConfig+0x4a>
 80023e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023e8:	e000      	b.n	80023ec <ETH_SetMACConfig+0x4c>
 80023ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	7c52      	ldrb	r2, [r2, #17]
 80023f2:	2a00      	cmp	r2, #0
 80023f4:	d102      	bne.n	80023fc <ETH_SetMACConfig+0x5c>
 80023f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023fa:	e000      	b.n	80023fe <ETH_SetMACConfig+0x5e>
 80023fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7c9b      	ldrb	r3, [r3, #18]
 8002404:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002406:	431a      	orrs	r2, r3
               macconf->Speed |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800240c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7f1b      	ldrb	r3, [r3, #28]
 8002418:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7f5b      	ldrb	r3, [r3, #29]
 8002420:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002422:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	7f92      	ldrb	r2, [r2, #30]
 8002428:	2a00      	cmp	r2, #0
 800242a:	d102      	bne.n	8002432 <ETH_SetMACConfig+0x92>
 800242c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002430:	e000      	b.n	8002434 <ETH_SetMACConfig+0x94>
 8002432:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002434:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	7fdb      	ldrb	r3, [r3, #31]
 800243a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800243c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002444:	2a00      	cmp	r2, #0
 8002446:	d102      	bne.n	800244e <ETH_SetMACConfig+0xae>
 8002448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244c:	e000      	b.n	8002450 <ETH_SetMACConfig+0xb0>
 800244e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002450:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800245e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002460:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b56      	ldr	r3, [pc, #344]	@ (80025cc <ETH_SetMACConfig+0x22c>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	430b      	orrs	r3, r1
 800247c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002482:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800248a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800248c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002494:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800249e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d102      	bne.n	80024b2 <ETH_SetMACConfig+0x112>
 80024ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x114>
 80024b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <ETH_SetMACConfig+0x230>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <ETH_SetMACConfig+0x234>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	430b      	orrs	r3, r1
 80024f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002502:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800250a:	2a00      	cmp	r2, #0
 800250c:	d101      	bne.n	8002512 <ETH_SetMACConfig+0x172>
 800250e:	2280      	movs	r2, #128	@ 0x80
 8002510:	e000      	b.n	8002514 <ETH_SetMACConfig+0x174>
 8002512:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002514:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002526:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	430b      	orrs	r3, r1
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800253c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002544:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	f023 0103 	bic.w	r1, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	430a      	orrs	r2, r1
 800255e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800256a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002586:	2a00      	cmp	r2, #0
 8002588:	d101      	bne.n	800258e <ETH_SetMACConfig+0x1ee>
 800258a:	2240      	movs	r2, #64	@ 0x40
 800258c:	e000      	b.n	8002590 <ETH_SetMACConfig+0x1f0>
 800258e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002590:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002598:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800259a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80025a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80025b0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	00048083 	.word	0x00048083
 80025d0:	c0f88000 	.word	0xc0f88000
 80025d4:	fffffef0 	.word	0xfffffef0

080025d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <ETH_SetDMAConfig+0xf8>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	6811      	ldr	r1, [r2, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800260a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7b1b      	ldrb	r3, [r3, #12]
 8002610:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <ETH_SetDMAConfig+0xfc>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	430b      	orrs	r3, r1
 800262c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002630:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7b5b      	ldrb	r3, [r3, #13]
 8002636:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002648:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <ETH_SetDMAConfig+0x100>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	430b      	orrs	r3, r1
 8002658:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800265c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7d1b      	ldrb	r3, [r3, #20]
 8002668:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800266a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	7f5b      	ldrb	r3, [r3, #29]
 8002670:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <ETH_SetDMAConfig+0x104>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	430b      	orrs	r3, r1
 800268e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002692:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7f1b      	ldrb	r3, [r3, #28]
 800269a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <ETH_SetDMAConfig+0x108>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	ffff87fd 	.word	0xffff87fd
 80026d4:	ffff2ffe 	.word	0xffff2ffe
 80026d8:	fffec000 	.word	0xfffec000
 80026dc:	ffc0efef 	.word	0xffc0efef
 80026e0:	7fc0ffff 	.word	0x7fc0ffff

080026e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0a4      	sub	sp, #144	@ 0x90
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026f2:	2300      	movs	r3, #0
 80026f4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800272c:	2300      	movs	r3, #0
 800272e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800273c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002740:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800275e:	2300      	movs	r3, #0
 8002760:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002762:	2300      	movs	r3, #0
 8002764:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002766:	2300      	movs	r3, #0
 8002768:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800277c:	2320      	movs	r3, #32
 800277e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800278e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002798:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027be:	2300      	movs	r3, #0
 80027c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fde6 	bl	80023a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027d8:	2301      	movs	r3, #1
 80027da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002804:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fee1 	bl	80025d8 <ETH_SetDMAConfig>
}
 8002816:	bf00      	nop
 8002818:	3790      	adds	r7, #144	@ 0x90
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e01d      	b.n	8002868 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68d9      	ldr	r1, [r3, #12]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	3206      	adds	r2, #6
 800285e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d9de      	bls.n	800282c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287c:	461a      	mov	r2, r3
 800287e:	2303      	movs	r3, #3
 8002880:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002890:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e023      	b.n	8002906 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6919      	ldr	r1, [r3, #16]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	3212      	adds	r2, #18
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d9d8      	bls.n	80028be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	461a      	mov	r2, r3
 8002934:	2303      	movs	r3, #3
 8002936:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002946:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800297a:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <HAL_GPIO_Init+0x11c>)
 800297c:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a42      	ldr	r2, [pc, #264]	@ (8002a8c <HAL_GPIO_Init+0x120>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x72>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a41      	ldr	r2, [pc, #260]	@ (8002a90 <HAL_GPIO_Init+0x124>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_GPIO_Init+0x72>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a40      	ldr	r2, [pc, #256]	@ (8002a94 <HAL_GPIO_Init+0x128>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d023      	beq.n	80029de <HAL_GPIO_Init+0x72>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a3f      	ldr	r2, [pc, #252]	@ (8002a98 <HAL_GPIO_Init+0x12c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x72>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a3e      	ldr	r2, [pc, #248]	@ (8002a9c <HAL_GPIO_Init+0x130>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01b      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa0 <HAL_GPIO_Init+0x134>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d017      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa4 <HAL_GPIO_Init+0x138>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_GPIO_Init+0x13c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00f      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	@ (8002aac <HAL_GPIO_Init+0x140>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00b      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a39      	ldr	r2, [pc, #228]	@ (8002ab0 <HAL_GPIO_Init+0x144>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a38      	ldr	r2, [pc, #224]	@ (8002ab4 <HAL_GPIO_Init+0x148>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x72>
 80029d6:	21b3      	movs	r1, #179	@ 0xb3
 80029d8:	4837      	ldr	r0, [pc, #220]	@ (8002ab8 <HAL_GPIO_Init+0x14c>)
 80029da:	f7fe f8b1 	bl	8000b40 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_GPIO_Init+0x86>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f0:	d303      	bcc.n	80029fa <HAL_GPIO_Init+0x8e>
 80029f2:	21b4      	movs	r1, #180	@ 0xb4
 80029f4:	4830      	ldr	r0, [pc, #192]	@ (8002ab8 <HAL_GPIO_Init+0x14c>)
 80029f6:	f7fe f8a3 	bl	8000b40 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 824f 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	f000 824a 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b11      	cmp	r3, #17
 8002a14:	f000 8245 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	f000 8240 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	f000 823b 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002a34:	f000 8235 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002a40:	f000 822f 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002a4c:	f000 8229 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002a58:	f000 8223 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002a64:	f000 821d 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002a70:	f000 8217 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	f000 8212 	beq.w	8002ea2 <HAL_GPIO_Init+0x536>
 8002a7e:	21b5      	movs	r1, #181	@ 0xb5
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <HAL_GPIO_Init+0x14c>)
 8002a82:	f7fe f85d 	bl	8000b40 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a86:	e20c      	b.n	8002ea2 <HAL_GPIO_Init+0x536>
 8002a88:	58000080 	.word	0x58000080
 8002a8c:	58020000 	.word	0x58020000
 8002a90:	58020400 	.word	0x58020400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	58020c00 	.word	0x58020c00
 8002a9c:	58021000 	.word	0x58021000
 8002aa0:	58021400 	.word	0x58021400
 8002aa4:	58021800 	.word	0x58021800
 8002aa8:	58021c00 	.word	0x58021c00
 8002aac:	58022000 	.word	0x58022000
 8002ab0:	58022400 	.word	0x58022400
 8002ab4:	58022800 	.word	0x58022800
 8002ab8:	08009400 	.word	0x08009400
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 81e4 	beq.w	8002e9c <HAL_GPIO_Init+0x530>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d005      	beq.n	8002aec <HAL_GPIO_Init+0x180>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d144      	bne.n	8002b76 <HAL_GPIO_Init+0x20a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <HAL_GPIO_Init+0x1a8>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00b      	beq.n	8002b14 <HAL_GPIO_Init+0x1a8>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d007      	beq.n	8002b14 <HAL_GPIO_Init+0x1a8>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x1a8>
 8002b0c:	21c4      	movs	r1, #196	@ 0xc4
 8002b0e:	489a      	ldr	r0, [pc, #616]	@ (8002d78 <HAL_GPIO_Init+0x40c>)
 8002b10:	f7fe f816 	bl	8000b40 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0201 	and.w	r2, r3, #1
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d027      	beq.n	8002bd2 <HAL_GPIO_Init+0x266>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_GPIO_Init+0x236>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x236>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x236>
 8002b9a:	21d6      	movs	r1, #214	@ 0xd6
 8002b9c:	4876      	ldr	r0, [pc, #472]	@ (8002d78 <HAL_GPIO_Init+0x40c>)
 8002b9e:	f7fd ffcf 	bl	8000b40 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d15b      	bne.n	8002c96 <HAL_GPIO_Init+0x32a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a66      	ldr	r2, [pc, #408]	@ (8002d7c <HAL_GPIO_Init+0x410>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a65      	ldr	r2, [pc, #404]	@ (8002d80 <HAL_GPIO_Init+0x414>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d027      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a64      	ldr	r2, [pc, #400]	@ (8002d84 <HAL_GPIO_Init+0x418>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d023      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a63      	ldr	r2, [pc, #396]	@ (8002d88 <HAL_GPIO_Init+0x41c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a62      	ldr	r2, [pc, #392]	@ (8002d8c <HAL_GPIO_Init+0x420>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01b      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a61      	ldr	r2, [pc, #388]	@ (8002d90 <HAL_GPIO_Init+0x424>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d017      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a60      	ldr	r2, [pc, #384]	@ (8002d94 <HAL_GPIO_Init+0x428>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a5f      	ldr	r2, [pc, #380]	@ (8002d98 <HAL_GPIO_Init+0x42c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00f      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <HAL_GPIO_Init+0x430>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_GPIO_Init+0x434>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_GPIO_Init+0x438>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2d2>
 8002c36:	21e3      	movs	r1, #227	@ 0xe3
 8002c38:	484f      	ldr	r0, [pc, #316]	@ (8002d78 <HAL_GPIO_Init+0x40c>)
 8002c3a:	f7fd ff81 	bl	8000b40 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	d903      	bls.n	8002c4e <HAL_GPIO_Init+0x2e2>
 8002c46:	21e4      	movs	r1, #228	@ 0xe4
 8002c48:	484b      	ldr	r0, [pc, #300]	@ (8002d78 <HAL_GPIO_Init+0x40c>)
 8002c4a:	f7fd ff79 	bl	8000b40 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e2 	beq.w	8002e9c <HAL_GPIO_Init+0x530>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <HAL_GPIO_Init+0x43c>)
 8002cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cde:	4a32      	ldr	r2, [pc, #200]	@ (8002da8 <HAL_GPIO_Init+0x43c>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8002da8 <HAL_GPIO_Init+0x43c>)
 8002cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <HAL_GPIO_Init+0x440>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_GPIO_Init+0x410>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d054      	beq.n	8002dcc <HAL_GPIO_Init+0x460>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_GPIO_Init+0x414>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04e      	beq.n	8002dc8 <HAL_GPIO_Init+0x45c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_GPIO_Init+0x418>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d048      	beq.n	8002dc4 <HAL_GPIO_Init+0x458>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <HAL_GPIO_Init+0x41c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d042      	beq.n	8002dc0 <HAL_GPIO_Init+0x454>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <HAL_GPIO_Init+0x420>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03c      	beq.n	8002dbc <HAL_GPIO_Init+0x450>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <HAL_GPIO_Init+0x424>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d036      	beq.n	8002db8 <HAL_GPIO_Init+0x44c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <HAL_GPIO_Init+0x428>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d030      	beq.n	8002db4 <HAL_GPIO_Init+0x448>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <HAL_GPIO_Init+0x42c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02a      	beq.n	8002db0 <HAL_GPIO_Init+0x444>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d9c <HAL_GPIO_Init+0x430>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x406>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <HAL_GPIO_Init+0x434>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x402>
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	e02f      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e02d      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e02b      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002d76:	bf00      	nop
 8002d78:	08009400 	.word	0x08009400
 8002d7c:	58020000 	.word	0x58020000
 8002d80:	58020400 	.word	0x58020400
 8002d84:	58020800 	.word	0x58020800
 8002d88:	58020c00 	.word	0x58020c00
 8002d8c:	58021000 	.word	0x58021000
 8002d90:	58021400 	.word	0x58021400
 8002d94:	58021800 	.word	0x58021800
 8002d98:	58021c00 	.word	0x58021c00
 8002d9c:	58022000 	.word	0x58022000
 8002da0:	58022400 	.word	0x58022400
 8002da4:	58022800 	.word	0x58022800
 8002da8:	58024400 	.word	0x58024400
 8002dac:	58000400 	.word	0x58000400
 8002db0:	2307      	movs	r3, #7
 8002db2:	e00c      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002db4:	2306      	movs	r3, #6
 8002db6:	e00a      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002db8:	2305      	movs	r3, #5
 8002dba:	e008      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e006      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e004      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e002      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_GPIO_Init+0x462>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	f002 0203 	and.w	r2, r2, #3
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4093      	lsls	r3, r2
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dde:	4937      	ldr	r1, [pc, #220]	@ (8002ebc <HAL_GPIO_Init+0x550>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x4a6>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x500>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x52a>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f ae05 	bne.w	8002abc <HAL_GPIO_Init+0x150>
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	58000400 	.word	0x58000400

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_GPIO_WritePin+0x20>
 8002ed6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002eda:	480e      	ldr	r0, [pc, #56]	@ (8002f14 <HAL_GPIO_WritePin+0x54>)
 8002edc:	f7fd fe30 	bl	8000b40 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x36>
 8002ee6:	787b      	ldrb	r3, [r7, #1]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d004      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x36>
 8002eec:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002ef0:	4808      	ldr	r0, [pc, #32]	@ (8002f14 <HAL_GPIO_WritePin+0x54>)
 8002ef2:	f7fd fe25 	bl	8000b40 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002ef6:	787b      	ldrb	r3, [r7, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efc:	887a      	ldrh	r2, [r7, #2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f02:	e003      	b.n	8002f0c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	041a      	lsls	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	08009400 	.word	0x08009400

08002f18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e10c      	b.n	8003144 <HAL_PCD_Init+0x22c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a87      	ldr	r2, [pc, #540]	@ (800314c <HAL_PCD_Init+0x234>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d008      	beq.n	8002f46 <HAL_PCD_Init+0x2e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a85      	ldr	r2, [pc, #532]	@ (8003150 <HAL_PCD_Init+0x238>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <HAL_PCD_Init+0x2e>
 8002f3e:	2186      	movs	r1, #134	@ 0x86
 8002f40:	4884      	ldr	r0, [pc, #528]	@ (8003154 <HAL_PCD_Init+0x23c>)
 8002f42:	f7fd fdfd 	bl	8000b40 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_PCD_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f8a8 	bl	80010b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 ff41 	bl	8008df4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7c1a      	ldrb	r2, [r3, #16]
 8002f7a:	f88d 2000 	strb.w	r2, [sp]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f82:	f005 fec5 	bl	8008d10 <USB_CoreInit>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_PCD_Init+0x80>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0d5      	b.n	8003144 <HAL_PCD_Init+0x22c>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f005 ff39 	bl	8008e16 <USB_SetCurrentMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_PCD_Init+0x9e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0c6      	b.n	8003144 <HAL_PCD_Init+0x22c>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e04a      	b.n	8003052 <HAL_PCD_Init+0x13a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3315      	adds	r3, #21
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3314      	adds	r3, #20
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	b298      	uxth	r0, r3
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	332e      	adds	r3, #46	@ 0x2e
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3318      	adds	r3, #24
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	331c      	adds	r3, #28
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3320      	adds	r3, #32
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3324      	adds	r3, #36	@ 0x24
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	791b      	ldrb	r3, [r3, #4]
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3af      	bcc.n	8002fbc <HAL_PCD_Init+0xa4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e044      	b.n	80030ec <HAL_PCD_Init+0x1d4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	791b      	ldrb	r3, [r3, #4]
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3b5      	bcc.n	8003062 <HAL_PCD_Init+0x14a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7c1a      	ldrb	r2, [r3, #16]
 80030fe:	f88d 2000 	strb.w	r2, [sp]
 8003102:	3304      	adds	r3, #4
 8003104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003106:	f005 fed3 	bl	8008eb0 <USB_DevInit>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e013      	b.n	8003144 <HAL_PCD_Init+0x22c>
  }

  hpcd->USB_Address = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7b1b      	ldrb	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_PCD_Init+0x220>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f810 	bl	8003158 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f006 f88e 	bl	800925e <USB_DevDisconnect>

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40080000 	.word	0x40080000
 8003150:	40040000 	.word	0x40040000
 8003154:	0800943c 	.word	0x0800943c

08003158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_PCDEx_ActivateLPM+0x44>)
 8003188:	4313      	orrs	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	10000003 	.word	0x10000003

080031a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d007      	beq.n	80031be <HAL_PWREx_ConfigSupply+0x1e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d004      	beq.n	80031be <HAL_PWREx_ConfigSupply+0x1e>
 80031b4:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80031b8:	481a      	ldr	r0, [pc, #104]	@ (8003224 <HAL_PWREx_ConfigSupply+0x84>)
 80031ba:	f7fd fcc1 	bl	8000b40 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_PWREx_ConfigSupply+0x88>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d00a      	beq.n	80031e0 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031ca:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_PWREx_ConfigSupply+0x88>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e01f      	b.n	800321c <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e01d      	b.n	800321c <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <HAL_PWREx_ConfigSupply+0x88>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f023 0207 	bic.w	r2, r3, #7
 80031e8:	490f      	ldr	r1, [pc, #60]	@ (8003228 <HAL_PWREx_ConfigSupply+0x88>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031f0:	f7fe f88a 	bl	8001308 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031f6:	e009      	b.n	800320c <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031f8:	f7fe f886 	bl	8001308 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003206:	d901      	bls.n	800320c <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <HAL_PWREx_ConfigSupply+0x88>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d1ee      	bne.n	80031f8 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08009474 	.word	0x08009474
 8003228:	58024800 	.word	0x58024800

0800322c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	58024800 	.word	0x58024800

0800324c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	@ 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f000 bd9c 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCC_OscConfig+0x6e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d122      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11c      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d116      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d110      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_RCC_OscConfig+0x6e>
 80032b0:	f240 11a1 	movw	r1, #417	@ 0x1a1
 80032b4:	4897      	ldr	r0, [pc, #604]	@ (8003514 <HAL_RCC_OscConfig+0x2c8>)
 80032b6:	f7fd fc43 	bl	8000b40 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 809d 	beq.w	8003402 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <HAL_RCC_OscConfig+0xa2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d009      	beq.n	80032ee <HAL_RCC_OscConfig+0xa2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e2:	d004      	beq.n	80032ee <HAL_RCC_OscConfig+0xa2>
 80032e4:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80032e8:	488a      	ldr	r0, [pc, #552]	@ (8003514 <HAL_RCC_OscConfig+0x2c8>)
 80032ea:	f7fd fc29 	bl	8000b40 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f8:	4b87      	ldr	r3, [pc, #540]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80032fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	2b10      	cmp	r3, #16
 8003302:	d007      	beq.n	8003314 <HAL_RCC_OscConfig+0xc8>
 8003304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003306:	2b18      	cmp	r3, #24
 8003308:	d111      	bne.n	800332e <HAL_RCC_OscConfig+0xe2>
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4b80      	ldr	r3, [pc, #512]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d06f      	beq.n	8003400 <HAL_RCC_OscConfig+0x1b4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d16b      	bne.n	8003400 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f000 bd35 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0xfa>
 8003338:	4b77      	ldr	r3, [pc, #476]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a76      	ldr	r2, [pc, #472]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0x158>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x11c>
 800334e:	4b72      	ldr	r3, [pc, #456]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a71      	ldr	r2, [pc, #452]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0x158>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x140>
 8003372:	4b69      	ldr	r3, [pc, #420]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a68      	ldr	r2, [pc, #416]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b66      	ldr	r3, [pc, #408]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a65      	ldr	r2, [pc, #404]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x158>
 800338c:	4b62      	ldr	r3, [pc, #392]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a61      	ldr	r2, [pc, #388]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b5f      	ldr	r3, [pc, #380]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5e      	ldr	r2, [pc, #376]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d014      	beq.n	80033d6 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd ffac 	bl	8001308 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b2:	e009      	b.n	80033c8 <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd ffa8 	bl	8001308 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d902      	bls.n	80033c8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	f000 bce8 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c8:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ef      	beq.n	80033b4 <HAL_RCC_OscConfig+0x168>
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fd ff97 	bl	8001308 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033dc:	e009      	b.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033de:	f7fd ff93 	bl	8001308 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	@ 0x64
 80033ea:	d902      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	f000 bcd3 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f2:	4b49      	ldr	r3, [pc, #292]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ef      	bne.n	80033de <HAL_RCC_OscConfig+0x192>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80f5 	beq.w	80035fa <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d018      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d014      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d010      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d00c      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b11      	cmp	r3, #17
 8003436:	d008      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b19      	cmp	r3, #25
 800343e:	d004      	beq.n	800344a <HAL_RCC_OscConfig+0x1fe>
 8003440:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003444:	4833      	ldr	r0, [pc, #204]	@ (8003514 <HAL_RCC_OscConfig+0x2c8>)
 8003446:	f7fd fb7b 	bl	8000b40 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003450:	d904      	bls.n	800345c <HAL_RCC_OscConfig+0x210>
 8003452:	f240 11db 	movw	r1, #475	@ 0x1db
 8003456:	482f      	ldr	r0, [pc, #188]	@ (8003514 <HAL_RCC_OscConfig+0x2c8>)
 8003458:	f7fd fb72 	bl	8000b40 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345c:	4b2e      	ldr	r3, [pc, #184]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003464:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003466:	4b2c      	ldr	r3, [pc, #176]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_RCC_OscConfig+0x236>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b18      	cmp	r3, #24
 8003476:	d15c      	bne.n	8003532 <HAL_RCC_OscConfig+0x2e6>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d157      	bne.n	8003532 <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003482:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_RCC_OscConfig+0x250>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f000 bc7e 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800349c:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0219 	bic.w	r2, r3, #25
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	491b      	ldr	r1, [pc, #108]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd ff2b 	bl	8001308 <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b4:	e009      	b.n	80034ca <HAL_RCC_OscConfig+0x27e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd ff27 	bl	8001308 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d902      	bls.n	80034ca <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f000 bc67 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ef      	beq.n	80034b6 <HAL_RCC_OscConfig+0x26a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	f7fd ff47 	bl	8001368 <HAL_GetREVID>
 80034da:	4603      	mov	r3, r0
 80034dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d81b      	bhi.n	800351c <HAL_RCC_OscConfig+0x2d0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d108      	bne.n	80034fe <HAL_RCC_OscConfig+0x2b2>
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034f4:	4a08      	ldr	r2, [pc, #32]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e07d      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	031b      	lsls	r3, r3, #12
 800350c:	4902      	ldr	r1, [pc, #8]	@ (8003518 <HAL_RCC_OscConfig+0x2cc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003512:	e072      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
 8003514:	080094b0 	.word	0x080094b0
 8003518:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b97      	ldr	r3, [pc, #604]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	4994      	ldr	r1, [pc, #592]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003530:	e063      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d046      	beq.n	80035c8 <HAL_RCC_OscConfig+0x37c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800353a:	4b90      	ldr	r3, [pc, #576]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0219 	bic.w	r2, r3, #25
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	498d      	ldr	r1, [pc, #564]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fedc 	bl	8001308 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fd fed8 	bl	8001308 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f000 bc18 	b.w	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003568:	4b84      	ldr	r3, [pc, #528]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	f7fd fef8 	bl	8001368 <HAL_GetREVID>
 8003578:	4603      	mov	r3, r0
 800357a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800357e:	4293      	cmp	r3, r2
 8003580:	d817      	bhi.n	80035b2 <HAL_RCC_OscConfig+0x366>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d108      	bne.n	800359c <HAL_RCC_OscConfig+0x350>
 800358a:	4b7c      	ldr	r3, [pc, #496]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003592:	4a7a      	ldr	r2, [pc, #488]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	e02e      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
 800359c:	4b77      	ldr	r3, [pc, #476]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	4974      	ldr	r1, [pc, #464]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	e023      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
 80035b2:	4b72      	ldr	r3, [pc, #456]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	061b      	lsls	r3, r3, #24
 80035c0:	496e      	ldr	r1, [pc, #440]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c8:	4b6c      	ldr	r3, [pc, #432]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6b      	ldr	r2, [pc, #428]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd fe98 	bl	8001308 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fd fe94 	bl	8001308 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e3d4      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035ee:	4b63      	ldr	r3, [pc, #396]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80c4 	beq.w	8003790 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_OscConfig+0x3d6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d004      	beq.n	8003622 <HAL_RCC_OscConfig+0x3d6>
 8003618:	f240 212b 	movw	r1, #555	@ 0x22b
 800361c:	4858      	ldr	r0, [pc, #352]	@ (8003780 <HAL_RCC_OscConfig+0x534>)
 800361e:	f7fd fa8f 	bl	8000b40 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	2b3f      	cmp	r3, #63	@ 0x3f
 8003628:	d904      	bls.n	8003634 <HAL_RCC_OscConfig+0x3e8>
 800362a:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 800362e:	4854      	ldr	r0, [pc, #336]	@ (8003780 <HAL_RCC_OscConfig+0x534>)
 8003630:	f7fd fa86 	bl	8000b40 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003634:	4b51      	ldr	r3, [pc, #324]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800363c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800363e:	4b4f      	ldr	r3, [pc, #316]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d007      	beq.n	800365a <HAL_RCC_OscConfig+0x40e>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b18      	cmp	r3, #24
 800364e:	d13a      	bne.n	80036c6 <HAL_RCC_OscConfig+0x47a>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d135      	bne.n	80036c6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800365a:	4b48      	ldr	r3, [pc, #288]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x426>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	2b80      	cmp	r3, #128	@ 0x80
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e392      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003672:	f7fd fe79 	bl	8001368 <HAL_GetREVID>
 8003676:	4603      	mov	r3, r0
 8003678:	f241 0203 	movw	r2, #4099	@ 0x1003
 800367c:	4293      	cmp	r3, r2
 800367e:	d817      	bhi.n	80036b0 <HAL_RCC_OscConfig+0x464>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d108      	bne.n	800369a <HAL_RCC_OscConfig+0x44e>
 8003688:	4b3c      	ldr	r3, [pc, #240]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003690:	4a3a      	ldr	r2, [pc, #232]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003692:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003696:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003698:	e07a      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800369a:	4b38      	ldr	r3, [pc, #224]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	4934      	ldr	r1, [pc, #208]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ae:	e06f      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b0:	4b32      	ldr	r3, [pc, #200]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	492f      	ldr	r1, [pc, #188]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036c4:	e064      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d042      	beq.n	8003754 <HAL_RCC_OscConfig+0x508>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036ce:	4b2b      	ldr	r3, [pc, #172]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2a      	ldr	r2, [pc, #168]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fd fe15 	bl	8001308 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036e2:	f7fd fe11 	bl	8001308 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e351      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f4:	4b21      	ldr	r3, [pc, #132]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003700:	f7fd fe32 	bl	8001368 <HAL_GetREVID>
 8003704:	4603      	mov	r3, r0
 8003706:	f241 0203 	movw	r2, #4099	@ 0x1003
 800370a:	4293      	cmp	r3, r2
 800370c:	d817      	bhi.n	800373e <HAL_RCC_OscConfig+0x4f2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	2b20      	cmp	r3, #32
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
 8003716:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800371e:	4a17      	ldr	r2, [pc, #92]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003724:	6053      	str	r3, [r2, #4]
 8003726:	e033      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
 8003728:	4b14      	ldr	r3, [pc, #80]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	069b      	lsls	r3, r3, #26
 8003736:	4911      	ldr	r1, [pc, #68]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
 800373c:	e028      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	490b      	ldr	r1, [pc, #44]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800374e:	4313      	orrs	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a08      	ldr	r2, [pc, #32]	@ (800377c <HAL_RCC_OscConfig+0x530>)
 800375a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd fdd2 	bl	8001308 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003766:	e00d      	b.n	8003784 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003768:	f7fd fdce 	bl	8001308 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d906      	bls.n	8003784 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e30e      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	080094b0 	.word	0x080094b0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003784:	4b96      	ldr	r3, [pc, #600]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d043      	beq.n	8003824 <HAL_RCC_OscConfig+0x5d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_OscConfig+0x56a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d004      	beq.n	80037b6 <HAL_RCC_OscConfig+0x56a>
 80037ac:	f240 216d 	movw	r1, #621	@ 0x26d
 80037b0:	488c      	ldr	r0, [pc, #560]	@ (80039e4 <HAL_RCC_OscConfig+0x798>)
 80037b2:	f7fd f9c5 	bl	8000b40 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d019      	beq.n	80037f2 <HAL_RCC_OscConfig+0x5a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c2:	4a87      	ldr	r2, [pc, #540]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fd fd9d 	bl	8001308 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x598>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d2:	f7fd fd99 	bl	8001308 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e2d9      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037e4:	4b7e      	ldr	r3, [pc, #504]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x586>
 80037f0:	e018      	b.n	8003824 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b7b      	ldr	r3, [pc, #492]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	4a7a      	ldr	r2, [pc, #488]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fd83 	bl	8001308 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fd fd7f 	bl	8001308 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e2bf      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003818:	4b71      	ldr	r3, [pc, #452]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x5ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d043      	beq.n	80038b8 <HAL_RCC_OscConfig+0x66c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_OscConfig+0x5fe>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d004      	beq.n	800384a <HAL_RCC_OscConfig+0x5fe>
 8003840:	f44f 7126 	mov.w	r1, #664	@ 0x298
 8003844:	4867      	ldr	r0, [pc, #412]	@ (80039e4 <HAL_RCC_OscConfig+0x798>)
 8003846:	f7fd f97b 	bl	8000b40 <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <HAL_RCC_OscConfig+0x63a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003852:	4b63      	ldr	r3, [pc, #396]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a62      	ldr	r2, [pc, #392]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003858:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800385c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800385e:	f7fd fd53 	bl	8001308 <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x62c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003866:	f7fd fd4f 	bl	8001308 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e28f      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003878:	4b59      	ldr	r3, [pc, #356]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x61a>
 8003884:	e018      	b.n	80038b8 <HAL_RCC_OscConfig+0x66c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003886:	4b56      	ldr	r3, [pc, #344]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a55      	ldr	r2, [pc, #340]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800388c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003892:	f7fd fd39 	bl	8001308 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x660>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389a:	f7fd fd35 	bl	8001308 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e275      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038ac:	4b4c      	ldr	r3, [pc, #304]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8099 	beq.w	80039f8 <HAL_RCC_OscConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x69c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_OscConfig+0x69c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d004      	beq.n	80038e8 <HAL_RCC_OscConfig+0x69c>
 80038de:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80038e2:	4840      	ldr	r0, [pc, #256]	@ (80039e4 <HAL_RCC_OscConfig+0x798>)
 80038e4:	f7fd f92c 	bl	8000b40 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038e8:	4b3f      	ldr	r3, [pc, #252]	@ (80039e8 <HAL_RCC_OscConfig+0x79c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3e      	ldr	r2, [pc, #248]	@ (80039e8 <HAL_RCC_OscConfig+0x79c>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f4:	f7fd fd08 	bl	8001308 <HAL_GetTick>
 80038f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x6c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd fd04 	bl	8001308 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	@ 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x6c2>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e244      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <HAL_RCC_OscConfig+0x79c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x6b0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x6e4>
 8003922:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	4a2e      	ldr	r2, [pc, #184]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	@ 0x70
 800392e:	e02d      	b.n	800398c <HAL_RCC_OscConfig+0x740>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x706>
 8003938:	4b29      	ldr	r3, [pc, #164]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a28      	ldr	r2, [pc, #160]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a25      	ldr	r2, [pc, #148]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800394a:	f023 0304 	bic.w	r3, r3, #4
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x740>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x728>
 800395a:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	@ 0x70
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	@ 0x70
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x740>
 8003974:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003978:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003980:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003984:	4a16      	ldr	r2, [pc, #88]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_RCC_OscConfig+0x774>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fcb8 	bl	8001308 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x766>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fd fcb4 	bl	8001308 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1f2      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_OscConfig+0x794>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <HAL_RCC_OscConfig+0x750>
 80039be:	e01b      	b.n	80039f8 <HAL_RCC_OscConfig+0x7ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fd fca2 	bl	8001308 <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039c6:	e011      	b.n	80039ec <HAL_RCC_OscConfig+0x7a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd fc9e 	bl	8001308 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d908      	bls.n	80039ec <HAL_RCC_OscConfig+0x7a0>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1dc      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
 80039de:	bf00      	nop
 80039e0:	58024400 	.word	0x58024400
 80039e4:	080094b0 	.word	0x080094b0
 80039e8:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ec:	4b97      	ldr	r3, [pc, #604]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e7      	bne.n	80039c8 <HAL_RCC_OscConfig+0x77c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x7ce>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_OscConfig+0x7ce>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d004      	beq.n	8003a1a <HAL_RCC_OscConfig+0x7ce>
 8003a10:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8003a14:	488e      	ldr	r0, [pc, #568]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003a16:	f7fd f893 	bl	8000b40 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 81b9 	beq.w	8003d96 <HAL_RCC_OscConfig+0xb4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a24:	4b89      	ldr	r3, [pc, #548]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a2c:	2b18      	cmp	r3, #24
 8003a2e:	f000 813f 	beq.w	8003cb0 <HAL_RCC_OscConfig+0xa64>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 8120 	bne.w	8003c7c <HAL_RCC_OscConfig+0xa30>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_OscConfig+0x81a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x81a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_OscConfig+0x81a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCC_OscConfig+0x81a>
 8003a5c:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8003a60:	487b      	ldr	r0, [pc, #492]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003a62:	f7fd f86d 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCC_OscConfig+0x844>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x844>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCC_OscConfig+0x844>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d004      	beq.n	8003a90 <HAL_RCC_OscConfig+0x844>
 8003a86:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8003a8a:	4871      	ldr	r0, [pc, #452]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003a8c:	f7fd f858 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_OscConfig+0x85e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d004      	beq.n	8003aaa <HAL_RCC_OscConfig+0x85e>
 8003aa0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8003aa4:	486a      	ldr	r0, [pc, #424]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003aa6:	f7fd f84b 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_OscConfig+0x86e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ab8:	d904      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x878>
 8003aba:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003abe:	4864      	ldr	r0, [pc, #400]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003ac0:	f7fd f83e 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d904      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x88a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad4:	d904      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x894>
 8003ad6:	f240 3101 	movw	r1, #769	@ 0x301
 8003ada:	485d      	ldr	r0, [pc, #372]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003adc:	f7fd f830 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aec:	2b80      	cmp	r3, #128	@ 0x80
 8003aee:	d904      	bls.n	8003afa <HAL_RCC_OscConfig+0x8ae>
 8003af0:	f240 3102 	movw	r1, #770	@ 0x302
 8003af4:	4856      	ldr	r0, [pc, #344]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003af6:	f7fd f823 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_OscConfig+0x8be>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d904      	bls.n	8003b14 <HAL_RCC_OscConfig+0x8c8>
 8003b0a:	f240 3103 	movw	r1, #771	@ 0x303
 8003b0e:	4850      	ldr	r0, [pc, #320]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003b10:	f7fd f816 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCC_OscConfig+0x8d8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d904      	bls.n	8003b2e <HAL_RCC_OscConfig+0x8e2>
 8003b24:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8003b28:	4849      	ldr	r0, [pc, #292]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003b2a:	f7fd f809 	bl	8000b40 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b36:	d304      	bcc.n	8003b42 <HAL_RCC_OscConfig+0x8f6>
 8003b38:	f240 3105 	movw	r1, #773	@ 0x305
 8003b3c:	4844      	ldr	r0, [pc, #272]	@ (8003c50 <HAL_RCC_OscConfig+0xa04>)
 8003b3e:	f7fc ffff 	bl	8000b40 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b42      	ldr	r3, [pc, #264]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a41      	ldr	r2, [pc, #260]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fbdb 	bl	8001308 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x91c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fd fbd7 	bl	8001308 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x91c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e117      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b68:	4b38      	ldr	r3, [pc, #224]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x90a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b74:	4b35      	ldr	r3, [pc, #212]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003b76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b78:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <HAL_RCC_OscConfig+0xa08>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	430a      	orrs	r2, r1
 8003b88:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	025b      	lsls	r3, r3, #9
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003bbe:	4923      	ldr	r1, [pc, #140]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bc4:	4b21      	ldr	r3, [pc, #132]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	4a20      	ldr	r2, [pc, #128]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd4:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_OscConfig+0xa0c>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bdc:	00d2      	lsls	r2, r2, #3
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	f023 020c 	bic.w	r2, r3, #12
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	f023 0202 	bic.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	4912      	ldr	r1, [pc, #72]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c08:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c14:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	4a0c      	ldr	r2, [pc, #48]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	4a09      	ldr	r2, [pc, #36]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	4a06      	ldr	r2, [pc, #24]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a03      	ldr	r2, [pc, #12]	@ (8003c4c <HAL_RCC_OscConfig+0xa00>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fb60 	bl	8001308 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c4a:	e010      	b.n	8003c6e <HAL_RCC_OscConfig+0xa22>
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	080094b0 	.word	0x080094b0
 8003c54:	fffffc0c 	.word	0xfffffc0c
 8003c58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd fb54 	bl	8001308 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xa22>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e094      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xa10>
 8003c7a:	e08c      	b.n	8003d96 <HAL_RCC_OscConfig+0xb4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b48      	ldr	r3, [pc, #288]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a47      	ldr	r2, [pc, #284]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fb3e 	bl	8001308 <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xa56>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd fb3a 	bl	8001308 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xa56>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e07a      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0xa44>
 8003cae:	e072      	b.n	8003d96 <HAL_RCC_OscConfig+0xb4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d031      	beq.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0203 	and.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d12a      	bne.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d122      	bne.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d11a      	bne.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	0a5b      	lsrs	r3, r3, #9
 8003cf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d111      	bne.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	0c1b      	lsrs	r3, r3, #16
 8003d08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d108      	bne.n	8003d28 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0xae0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e035      	b.n	8003d98 <HAL_RCC_OscConfig+0xb4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d029      	beq.n	8003d96 <HAL_RCC_OscConfig+0xb4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4a:	d304      	bcc.n	8003d56 <HAL_RCC_OscConfig+0xb0a>
 8003d4c:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8003d50:	4814      	ldr	r0, [pc, #80]	@ (8003da4 <HAL_RCC_OscConfig+0xb58>)
 8003d52:	f7fc fef5 	bl	8000b40 <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d56:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	4a11      	ldr	r2, [pc, #68]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d62:	f7fd fad1 	bl	8001308 <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d68:	bf00      	nop
 8003d6a:	f7fd facd 	bl	8001308 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d0f9      	beq.n	8003d6a <HAL_RCC_OscConfig+0xb1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_OscConfig+0xb5c>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d82:	00d2      	lsls	r2, r2, #3
 8003d84:	4906      	ldr	r1, [pc, #24]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d8a:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_RCC_OscConfig+0xb54>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3730      	adds	r7, #48	@ 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	58024400 	.word	0x58024400
 8003da4:	080094b0 	.word	0x080094b0
 8003da8:	ffff0007 	.word	0xffff0007

08003dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e354      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x24>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dce:	d904      	bls.n	8003dda <HAL_RCC_ClockConfig+0x2e>
 8003dd0:	f240 31a7 	movw	r1, #935	@ 0x3a7
 8003dd4:	4827      	ldr	r0, [pc, #156]	@ (8003e74 <HAL_RCC_ClockConfig+0xc8>)
 8003dd6:	f7fc feb3 	bl	8000b40 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d031      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d02b      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d028      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d025      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d022      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d01f      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b07      	cmp	r3, #7
 8003e08:	d01c      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b09      	cmp	r3, #9
 8003e14:	d016      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b0a      	cmp	r3, #10
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b0b      	cmp	r3, #11
 8003e20:	d010      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b0c      	cmp	r3, #12
 8003e26:	d00d      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b0d      	cmp	r3, #13
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b0e      	cmp	r3, #14
 8003e32:	d007      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d004      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x98>
 8003e3a:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8003e3e:	480d      	ldr	r0, [pc, #52]	@ (8003e74 <HAL_RCC_ClockConfig+0xc8>)
 8003e40:	f7fc fe7e 	bl	8000b40 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_RCC_ClockConfig+0xcc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d914      	bls.n	8003e7c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_ClockConfig+0xcc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	4907      	ldr	r1, [pc, #28]	@ (8003e78 <HAL_RCC_ClockConfig+0xcc>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCC_ClockConfig+0xcc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2fa      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
 8003e74:	080094b0 	.word	0x080094b0
 8003e78:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d029      	beq.n	8003edc <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d921      	bls.n	8003edc <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d014      	beq.n	8003eca <HAL_RCC_ClockConfig+0x11e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0x11e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b50      	cmp	r3, #80	@ 0x50
 8003eae:	d00c      	beq.n	8003eca <HAL_RCC_ClockConfig+0x11e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b60      	cmp	r3, #96	@ 0x60
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x11e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b70      	cmp	r3, #112	@ 0x70
 8003ebe:	d004      	beq.n	8003eca <HAL_RCC_ClockConfig+0x11e>
 8003ec0:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 8003ec4:	4871      	ldr	r0, [pc, #452]	@ (800408c <HAL_RCC_ClockConfig+0x2e0>)
 8003ec6:	f7fc fe3b 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eca:	4b6f      	ldr	r3, [pc, #444]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	496c      	ldr	r1, [pc, #432]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d029      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	4b66      	ldr	r3, [pc, #408]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d921      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d014      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x17e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	d010      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x17e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b50      	cmp	r3, #80	@ 0x50
 8003f0e:	d00c      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x17e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b60      	cmp	r3, #96	@ 0x60
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x17e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	2b70      	cmp	r3, #112	@ 0x70
 8003f1e:	d004      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x17e>
 8003f20:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8003f24:	4859      	ldr	r0, [pc, #356]	@ (800408c <HAL_RCC_ClockConfig+0x2e0>)
 8003f26:	f7fc fe0b 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4954      	ldr	r1, [pc, #336]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02d      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d925      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d018      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1e6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f68:	d013      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1e6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f72:	d00e      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1e6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1e6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f86:	d004      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1e6>
 8003f88:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8003f8c:	483f      	ldr	r0, [pc, #252]	@ (800408c <HAL_RCC_ClockConfig+0x2e0>)
 8003f8e:	f7fc fdd7 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f92:	4b3d      	ldr	r3, [pc, #244]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	493a      	ldr	r1, [pc, #232]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d029      	beq.n	8004004 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d921      	bls.n	8004004 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d014      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x246>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d010      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x246>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	2b50      	cmp	r3, #80	@ 0x50
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x246>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2b60      	cmp	r3, #96	@ 0x60
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x246>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b70      	cmp	r3, #112	@ 0x70
 8003fe6:	d004      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x246>
 8003fe8:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8003fec:	4827      	ldr	r0, [pc, #156]	@ (800408c <HAL_RCC_ClockConfig+0x2e0>)
 8003fee:	f7fc fda7 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ff2:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4922      	ldr	r1, [pc, #136]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d03f      	beq.n	8004090 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	429a      	cmp	r2, r3
 800401e:	d937      	bls.n	8004090 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d024      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d020      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d01c      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b0a      	cmp	r3, #10
 800403e:	d018      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b0b      	cmp	r3, #11
 8004046:	d014      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d010      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b0d      	cmp	r3, #13
 8004056:	d00c      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b0e      	cmp	r3, #14
 800405e:	d008      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d004      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2c6>
 8004068:	f240 410c 	movw	r1, #1036	@ 0x40c
 800406c:	4807      	ldr	r0, [pc, #28]	@ (800408c <HAL_RCC_ClockConfig+0x2e0>)
 800406e:	f7fc fd67 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4902      	ldr	r1, [pc, #8]	@ (8004088 <HAL_RCC_ClockConfig+0x2dc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	618b      	str	r3, [r1, #24]
 8004084:	e004      	b.n	8004090 <HAL_RCC_ClockConfig+0x2e4>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
 800408c:	080094b0 	.word	0x080094b0
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 809c 	beq.w	80041d6 <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02c      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ae:	d027      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80040b8:	d022      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80040c2:	d01d      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80040cc:	d018      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80040e0:	d00e      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80040ea:	d009      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040f4:	d004      	beq.n	8004100 <HAL_RCC_ClockConfig+0x354>
 80040f6:	f240 411c 	movw	r1, #1052	@ 0x41c
 80040fa:	4863      	ldr	r0, [pc, #396]	@ (8004288 <HAL_RCC_ClockConfig+0x4dc>)
 80040fc:	f7fc fd20 	bl	8000b40 <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d010      	beq.n	800412a <HAL_RCC_ClockConfig+0x37e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_RCC_ClockConfig+0x37e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x37e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d004      	beq.n	800412a <HAL_RCC_ClockConfig+0x37e>
 8004120:	f240 411d 	movw	r1, #1053	@ 0x41d
 8004124:	4858      	ldr	r0, [pc, #352]	@ (8004288 <HAL_RCC_ClockConfig+0x4dc>)
 8004126:	f7fc fd0b 	bl	8000b40 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800412a:	4b58      	ldr	r3, [pc, #352]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4955      	ldr	r1, [pc, #340]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004144:	4b51      	ldr	r3, [pc, #324]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d121      	bne.n	8004194 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e18a      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d107      	bne.n	800416c <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415c:	4b4b      	ldr	r3, [pc, #300]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e17e      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004174:	4b45      	ldr	r3, [pc, #276]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e172      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004184:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e16a      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004194:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f023 0207 	bic.w	r2, r3, #7
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	493a      	ldr	r1, [pc, #232]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fd f8af 	bl	8001308 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ae:	f7fd f8ab 	bl	8001308 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e152      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c4:	4b31      	ldr	r3, [pc, #196]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d1eb      	bne.n	80041ae <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d039      	beq.n	8004256 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	4b29      	ldr	r3, [pc, #164]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d231      	bcs.n	8004256 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d024      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d020      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b09      	cmp	r3, #9
 8004208:	d01c      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b0a      	cmp	r3, #10
 8004210:	d018      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b0b      	cmp	r3, #11
 8004218:	d014      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d010      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b0d      	cmp	r3, #13
 8004228:	d00c      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b0e      	cmp	r3, #14
 8004230:	d008      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d004      	beq.n	8004244 <HAL_RCC_ClockConfig+0x498>
 800423a:	f240 415e 	movw	r1, #1118	@ 0x45e
 800423e:	4812      	ldr	r0, [pc, #72]	@ (8004288 <HAL_RCC_ClockConfig+0x4dc>)
 8004240:	f7fc fc7e 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f023 020f 	bic.w	r2, r3, #15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	490e      	ldr	r1, [pc, #56]	@ (800428c <HAL_RCC_ClockConfig+0x4e0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004256:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <HAL_RCC_ClockConfig+0x4e4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d217      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <HAL_RCC_ClockConfig+0x4e4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 020f 	bic.w	r2, r3, #15
 800426c:	4908      	ldr	r1, [pc, #32]	@ (8004290 <HAL_RCC_ClockConfig+0x4e4>)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCC_ClockConfig+0x4e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d008      	beq.n	8004294 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0f1      	b.n	800446a <HAL_RCC_ClockConfig+0x6be>
 8004286:	bf00      	nop
 8004288:	080094b0 	.word	0x080094b0
 800428c:	58024400 	.word	0x58024400
 8004290:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d029      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	4b73      	ldr	r3, [pc, #460]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d221      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d014      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x536>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d010      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x536>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b50      	cmp	r3, #80	@ 0x50
 80042c6:	d00c      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x536>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b60      	cmp	r3, #96	@ 0x60
 80042ce:	d008      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x536>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b70      	cmp	r3, #112	@ 0x70
 80042d6:	d004      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x536>
 80042d8:	f240 417f 	movw	r1, #1151	@ 0x47f
 80042dc:	4866      	ldr	r0, [pc, #408]	@ (8004478 <HAL_RCC_ClockConfig+0x6cc>)
 80042de:	f7fc fc2f 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e2:	4b64      	ldr	r3, [pc, #400]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4961      	ldr	r1, [pc, #388]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d029      	beq.n	8004354 <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800430c:	429a      	cmp	r2, r3
 800430e:	d221      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d014      	beq.n	8004342 <HAL_RCC_ClockConfig+0x596>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x596>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	2b50      	cmp	r3, #80	@ 0x50
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_ClockConfig+0x596>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x596>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b70      	cmp	r3, #112	@ 0x70
 8004336:	d004      	beq.n	8004342 <HAL_RCC_ClockConfig+0x596>
 8004338:	f240 4191 	movw	r1, #1169	@ 0x491
 800433c:	484e      	ldr	r0, [pc, #312]	@ (8004478 <HAL_RCC_ClockConfig+0x6cc>)
 800433e:	f7fc fbff 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004342:	4b4c      	ldr	r3, [pc, #304]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4949      	ldr	r1, [pc, #292]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02d      	beq.n	80043bc <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	4b43      	ldr	r3, [pc, #268]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800436c:	429a      	cmp	r2, r3
 800436e:	d225      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_RCC_ClockConfig+0x5fe>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004380:	d013      	beq.n	80043aa <HAL_RCC_ClockConfig+0x5fe>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800438a:	d00e      	beq.n	80043aa <HAL_RCC_ClockConfig+0x5fe>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x5fe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439e:	d004      	beq.n	80043aa <HAL_RCC_ClockConfig+0x5fe>
 80043a0:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 80043a4:	4834      	ldr	r0, [pc, #208]	@ (8004478 <HAL_RCC_ClockConfig+0x6cc>)
 80043a6:	f7fc fbcb 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043aa:	4b32      	ldr	r3, [pc, #200]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	492f      	ldr	r1, [pc, #188]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d029      	beq.n	800441c <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d221      	bcs.n	800441c <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d014      	beq.n	800440a <HAL_RCC_ClockConfig+0x65e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x65e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b50      	cmp	r3, #80	@ 0x50
 80043ee:	d00c      	beq.n	800440a <HAL_RCC_ClockConfig+0x65e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b60      	cmp	r3, #96	@ 0x60
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x65e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b70      	cmp	r3, #112	@ 0x70
 80043fe:	d004      	beq.n	800440a <HAL_RCC_ClockConfig+0x65e>
 8004400:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 8004404:	481c      	ldr	r0, [pc, #112]	@ (8004478 <HAL_RCC_ClockConfig+0x6cc>)
 8004406:	f7fc fb9b 	bl	8000b40 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800440a:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4917      	ldr	r1, [pc, #92]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800441c:	f000 f836 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b14      	ldr	r3, [pc, #80]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	4913      	ldr	r1, [pc, #76]	@ (800447c <HAL_RCC_ClockConfig+0x6d0>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800443a:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <HAL_RCC_ClockConfig+0x6c8>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	4a0e      	ldr	r2, [pc, #56]	@ (800447c <HAL_RCC_ClockConfig+0x6d0>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	4a0b      	ldr	r2, [pc, #44]	@ (8004480 <HAL_RCC_ClockConfig+0x6d4>)
 8004452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004454:	4a0b      	ldr	r2, [pc, #44]	@ (8004484 <HAL_RCC_ClockConfig+0x6d8>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCC_ClockConfig+0x6dc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc ff08 	bl	8001274 <HAL_InitTick>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
 8004478:	080094b0 	.word	0x080094b0
 800447c:	0800959c 	.word	0x0800959c
 8004480:	24000004 	.word	0x24000004
 8004484:	24000000 	.word	0x24000000
 8004488:	24000008 	.word	0x24000008

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	@ 0x24
 8004490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4bb3      	ldr	r3, [pc, #716]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800449a:	2b18      	cmp	r3, #24
 800449c:	f200 8155 	bhi.w	800474a <HAL_RCC_GetSysClockFreq+0x2be>
 80044a0:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	0800474b 	.word	0x0800474b
 80044b0:	0800474b 	.word	0x0800474b
 80044b4:	0800474b 	.word	0x0800474b
 80044b8:	0800474b 	.word	0x0800474b
 80044bc:	0800474b 	.word	0x0800474b
 80044c0:	0800474b 	.word	0x0800474b
 80044c4:	0800474b 	.word	0x0800474b
 80044c8:	08004533 	.word	0x08004533
 80044cc:	0800474b 	.word	0x0800474b
 80044d0:	0800474b 	.word	0x0800474b
 80044d4:	0800474b 	.word	0x0800474b
 80044d8:	0800474b 	.word	0x0800474b
 80044dc:	0800474b 	.word	0x0800474b
 80044e0:	0800474b 	.word	0x0800474b
 80044e4:	0800474b 	.word	0x0800474b
 80044e8:	08004539 	.word	0x08004539
 80044ec:	0800474b 	.word	0x0800474b
 80044f0:	0800474b 	.word	0x0800474b
 80044f4:	0800474b 	.word	0x0800474b
 80044f8:	0800474b 	.word	0x0800474b
 80044fc:	0800474b 	.word	0x0800474b
 8004500:	0800474b 	.word	0x0800474b
 8004504:	0800474b 	.word	0x0800474b
 8004508:	0800453f 	.word	0x0800453f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004518:	4b91      	ldr	r3, [pc, #580]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	4a90      	ldr	r2, [pc, #576]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800452a:	e111      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800452c:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	e10e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004532:	4b8d      	ldr	r3, [pc, #564]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004534:	61bb      	str	r3, [r7, #24]
      break;
 8004536:	e10b      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004538:	4b8c      	ldr	r3, [pc, #560]	@ (800476c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800453a:	61bb      	str	r3, [r7, #24]
      break;
 800453c:	e108      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800453e:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004548:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004552:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004554:	4b82      	ldr	r3, [pc, #520]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800455e:	4b80      	ldr	r3, [pc, #512]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80e1 	beq.w	8004744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	f000 8083 	beq.w	8004690 <HAL_RCC_GetSysClockFreq+0x204>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b02      	cmp	r3, #2
 800458e:	f200 80a1 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d056      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x1c0>
 800459e:	e099      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02d      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b62      	ldr	r3, [pc, #392]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004606:	e087      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464a:	e065      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004672:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800468e:	e043      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800477c <HAL_RCC_GetSysClockFreq+0x2f0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d2:	e021      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004716:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004722:	3301      	adds	r3, #1
 8004724:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004730:	edd7 6a07 	vldr	s13, [r7, #28]
 8004734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473c:	ee17 3a90 	vmov	r3, s15
 8004740:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004742:	e005      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
      break;
 8004748:	e002      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800474a:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800474c:	61bb      	str	r3, [r7, #24]
      break;
 800474e:	bf00      	nop
  }

  return sysclockfreq;
 8004750:	69bb      	ldr	r3, [r7, #24]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	003d0900 	.word	0x003d0900
 800476c:	007a1200 	.word	0x007a1200
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4a742400 	.word	0x4a742400
 800477c:	4af42400 	.word	0x4af42400

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004786:	f7ff fe81 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800478a:	4602      	mov	r2, r0
 800478c:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	490f      	ldr	r1, [pc, #60]	@ (80047d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004798:	5ccb      	ldrb	r3, [r1, r3]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047a4:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047ae:	5cd3      	ldrb	r3, [r2, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	4a07      	ldr	r2, [pc, #28]	@ (80047d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047be:	4a07      	ldr	r2, [pc, #28]	@ (80047dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	58024400 	.word	0x58024400
 80047d4:	0800959c 	.word	0x0800959c
 80047d8:	24000004 	.word	0x24000004
 80047dc:	24000000 	.word	0x24000000

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047e4:	f7ff ffcc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	@ (8004808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	58024400 	.word	0x58024400
 8004808:	0800959c 	.word	0x0800959c

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004810:	f7ff ffb6 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	@ (8004834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	0800959c 	.word	0x0800959c

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b0ca      	sub	sp, #296	@ 0x128
 800483e:	af00      	add	r7, sp, #0
 8004840:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800484a:	2300      	movs	r3, #0
 800484c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800485c:	2500      	movs	r5, #0
 800485e:	ea54 0305 	orrs.w	r3, r4, r5
 8004862:	d049      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800486e:	d02f      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004870:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004874:	d828      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800487a:	d01a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800487c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004880:	d822      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800488a:	d007      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800488c:	e01c      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488e:	4bb8      	ldr	r3, [pc, #736]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	4ab7      	ldr	r2, [pc, #732]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800489a:	e01a      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	3308      	adds	r3, #8
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 ffb5 	bl	8006814 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048b0:	e00f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 f8cc 	bl	8006a58 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c6:	e004      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048da:	4ba5      	ldr	r3, [pc, #660]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048e8:	4aa1      	ldr	r2, [pc, #644]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004904:	f04f 0900 	mov.w	r9, #0
 8004908:	ea58 0309 	orrs.w	r3, r8, r9
 800490c:	d047      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	2b04      	cmp	r3, #4
 8004916:	d82a      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004935 	.word	0x08004935
 8004924:	08004943 	.word	0x08004943
 8004928:	08004959 	.word	0x08004959
 800492c:	08004977 	.word	0x08004977
 8004930:	08004977 	.word	0x08004977
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004934:	4b8e      	ldr	r3, [pc, #568]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	4a8d      	ldr	r2, [pc, #564]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800493a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800493e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004940:	e01a      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	3308      	adds	r3, #8
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f001 ff62 	bl	8006814 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004956:	e00f      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	3328      	adds	r3, #40	@ 0x28
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f002 f879 	bl	8006a58 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004980:	4b7b      	ldr	r3, [pc, #492]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	f023 0107 	bic.w	r1, r3, #7
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	4a78      	ldr	r2, [pc, #480]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004990:	430b      	orrs	r3, r1
 8004992:	6513      	str	r3, [r2, #80]	@ 0x50
 8004994:	e003      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049aa:	f04f 0b00 	mov.w	fp, #0
 80049ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80049b2:	d04c      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049be:	d030      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c4:	d829      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c8:	d02d      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80049cc:	d825      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d018      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80049d2:	2b80      	cmp	r3, #128	@ 0x80
 80049d4:	d821      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049da:	2b40      	cmp	r3, #64	@ 0x40
 80049dc:	d007      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80049de:	e01c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4b63      	ldr	r3, [pc, #396]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	4a62      	ldr	r2, [pc, #392]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049ec:	e01c      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	3308      	adds	r3, #8
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 ff0c 	bl	8006814 <RCCEx_PLL2_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a02:	e011      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	3328      	adds	r3, #40	@ 0x28
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f002 f823 	bl	8006a58 <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a18:	e006      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a30:	4b4f      	ldr	r3, [pc, #316]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	d053      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a7a:	d035      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a80:	d82e      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a86:	d031      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a8c:	d828      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a92:	d01a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a98:	d822      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa6:	4b32      	ldr	r3, [pc, #200]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	4a31      	ldr	r2, [pc, #196]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e01c      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fea9 	bl	8006814 <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e011      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	3328      	adds	r3, #40	@ 0x28
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 ffc0 	bl	8006a58 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ade:	e006      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae6:	e002      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004af6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b06:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0c:	e003      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b30:	460b      	mov	r3, r1
 8004b32:	4313      	orrs	r3, r2
 8004b34:	d056      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b42:	d038      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b48:	d831      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b4e:	d034      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b54:	d82b      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b60:	d825      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b6c:	e01f      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b6e:	bf00      	nop
 8004b70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b74:	4ba2      	ldr	r3, [pc, #648]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4aa1      	ldr	r2, [pc, #644]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b80:	e01c      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	3308      	adds	r3, #8
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fe42 	bl	8006814 <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b96:	e011      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 ff59 	bl	8006a58 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bd4:	4a8a      	ldr	r2, [pc, #552]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bda:	e003      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d03a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0a:	2b30      	cmp	r3, #48	@ 0x30
 8004c0c:	d01f      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c0e:	2b30      	cmp	r3, #48	@ 0x30
 8004c10:	d819      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d00c      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d815      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d019      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d111      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c22:	4b77      	ldr	r3, [pc, #476]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a76      	ldr	r2, [pc, #472]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c2e:	e011      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	3308      	adds	r3, #8
 8004c36:	2102      	movs	r1, #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 fdeb 	bl	8006814 <RCCEx_PLL2_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c5c:	4b68      	ldr	r3, [pc, #416]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6a:	4a65      	ldr	r2, [pc, #404]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d051      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ca4:	d035      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004caa:	d82e      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cb0:	d031      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004cb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cb6:	d828      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbc:	d01a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc2:	d822      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ccc:	d007      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004cce:	e01c      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fd94 	bl	8006814 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cf2:	e011      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf8:	3328      	adds	r3, #40	@ 0x28
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 feab 	bl	8006a58 <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d08:	e006      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d20:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2e:	4a34      	ldr	r2, [pc, #208]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d056      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d68:	d033      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d6e:	d82c      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d74:	d02f      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004d76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d7a:	d826      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d80:	d02b      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004d82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d86:	d820      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d8c:	d012      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d92:	d81a      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d022      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9c:	d115      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	3308      	adds	r3, #8
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fd34 	bl	8006814 <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004db2:	e015      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	3328      	adds	r3, #40	@ 0x28
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fe4b 	bl	8006a58 <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df6:	4a02      	ldr	r2, [pc, #8]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d055      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e38:	d033      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e3e:	d82c      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e44:	d02f      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d826      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e50:	d02b      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e56:	d820      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5c:	d012      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e62:	d81a      	bhi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d022      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6c:	d115      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	3308      	adds	r3, #8
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fccc 	bl	8006814 <RCCEx_PLL2_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e82:	e015      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	3328      	adds	r3, #40	@ 0x28
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 fde3 	bl	8006a58 <RCCEx_PLL3_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	d037      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f02:	d00e      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f08:	d816      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f12:	d111      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f14:	4b37      	ldr	r3, [pc, #220]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	4a36      	ldr	r2, [pc, #216]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f20:	e00f      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	3308      	adds	r3, #8
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 fc72 	bl	8006814 <RCCEx_PLL2_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f36:	e004      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a26      	ldr	r2, [pc, #152]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d03b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d81c      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fa9 	.word	0x08004fa9
 8004fa0:	08004fb7 	.word	0x08004fb7
 8004fa4:	08004fd5 	.word	0x08004fd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa8:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	4a11      	ldr	r2, [pc, #68]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fb4:	e00f      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	3308      	adds	r3, #8
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fc28 	bl	8006814 <RCCEx_PLL2_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fca:	e004      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe2:	f023 0103 	bic.w	r1, r3, #3
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fec:	4a01      	ldr	r2, [pc, #4]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ff2:	e005      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800500c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005016:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	f000 82f1 	beq.w	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800502a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502e:	f000 81eb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800503a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503e:	f000 81e3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800504a:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800504e:	f000 81db 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800505a:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
 800505e:	f000 81d3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800506a:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
 800506e:	f000 81cb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800507a:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
 800507e:	f000 81c3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800508a:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
 800508e:	f000 81bb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800509a:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
 800509e:	f000 81b3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050aa:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
 80050ae:	f000 81ab 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ba:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 80050be:	f000 81a3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ca:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
 80050ce:	f000 819b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050da:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
 80050de:	f000 8193 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ea:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
 80050ee:	f000 818b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050fa:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
 80050fe:	f000 8183 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800510a:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
 800510e:	f000 817b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800511a:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
 800511e:	f000 8173 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800512a:	4bbd      	ldr	r3, [pc, #756]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800512c:	429a      	cmp	r2, r3
 800512e:	f000 816b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005136:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800513a:	4bba      	ldr	r3, [pc, #744]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0xbec>)
 800513c:	429a      	cmp	r2, r3
 800513e:	f000 8163 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800514a:	4bb7      	ldr	r3, [pc, #732]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800514c:	429a      	cmp	r2, r3
 800514e:	f000 815b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005156:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800515a:	4bb4      	ldr	r3, [pc, #720]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800515c:	429a      	cmp	r2, r3
 800515e:	f000 8153 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005166:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800516a:	4bb1      	ldr	r3, [pc, #708]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800516c:	429a      	cmp	r2, r3
 800516e:	f000 814b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800517a:	4bae      	ldr	r3, [pc, #696]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800517c:	429a      	cmp	r2, r3
 800517e:	f000 8143 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800518a:	4bab      	ldr	r3, [pc, #684]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc00>)
 800518c:	429a      	cmp	r2, r3
 800518e:	f000 813b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005196:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800519a:	4ba8      	ldr	r3, [pc, #672]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800519c:	429a      	cmp	r2, r3
 800519e:	f000 8133 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051aa:	4ba5      	ldr	r3, [pc, #660]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0xc08>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	f000 812b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051ba:	4ba2      	ldr	r3, [pc, #648]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc0c>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	f000 8123 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051ca:	4b9f      	ldr	r3, [pc, #636]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f000 811b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051da:	4b9c      	ldr	r3, [pc, #624]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0xc14>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	f000 8113 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051ea:	4b99      	ldr	r3, [pc, #612]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f000 810b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80051fa:	4b96      	ldr	r3, [pc, #600]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0xc1c>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	f000 8103 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800520a:	4b93      	ldr	r3, [pc, #588]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800520c:	429a      	cmp	r2, r3
 800520e:	f000 80fb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800521a:	4b90      	ldr	r3, [pc, #576]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0xc24>)
 800521c:	429a      	cmp	r2, r3
 800521e:	f000 80f3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800522a:	4b8d      	ldr	r3, [pc, #564]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 800522c:	429a      	cmp	r2, r3
 800522e:	f000 80eb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800523a:	4b8a      	ldr	r3, [pc, #552]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800523c:	429a      	cmp	r2, r3
 800523e:	f000 80e3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005246:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800524a:	4b87      	ldr	r3, [pc, #540]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800524c:	429a      	cmp	r2, r3
 800524e:	f000 80db 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800525a:	4b84      	ldr	r3, [pc, #528]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xc34>)
 800525c:	429a      	cmp	r2, r3
 800525e:	f000 80d3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800526a:	4b81      	ldr	r3, [pc, #516]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800526c:	429a      	cmp	r2, r3
 800526e:	f000 80cb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800527a:	4b7e      	ldr	r3, [pc, #504]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 800527c:	429a      	cmp	r2, r3
 800527e:	f000 80c3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005286:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800528a:	4b7b      	ldr	r3, [pc, #492]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 800528c:	429a      	cmp	r2, r3
 800528e:	f000 80bb 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800529a:	4b78      	ldr	r3, [pc, #480]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800529c:	429a      	cmp	r2, r3
 800529e:	f000 80b3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052aa:	4b75      	ldr	r3, [pc, #468]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	f000 80ab 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052ba:	4b72      	ldr	r3, [pc, #456]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0xc4c>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	f000 80a3 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	f000 809b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052da:	4b6c      	ldr	r3, [pc, #432]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80052dc:	429a      	cmp	r2, r3
 80052de:	f000 8093 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052ea:	4b69      	ldr	r3, [pc, #420]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0xc58>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	f000 808b 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80052fa:	4b66      	ldr	r3, [pc, #408]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f000 8083 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005306:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800530a:	4b63      	ldr	r3, [pc, #396]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 800530c:	429a      	cmp	r2, r3
 800530e:	d07b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005318:	4b60      	ldr	r3, [pc, #384]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 800531a:	429a      	cmp	r2, r3
 800531c:	d074      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005322:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005326:	4b5e      	ldr	r3, [pc, #376]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8005328:	429a      	cmp	r2, r3
 800532a:	d06d      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005334:	4b5b      	ldr	r3, [pc, #364]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005336:	429a      	cmp	r2, r3
 8005338:	d066      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005342:	4b59      	ldr	r3, [pc, #356]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d05f      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005350:	4b56      	ldr	r3, [pc, #344]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 8005352:	429a      	cmp	r2, r3
 8005354:	d058      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800535e:	4b54      	ldr	r3, [pc, #336]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d051      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800536c:	4b51      	ldr	r3, [pc, #324]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>)
 800536e:	429a      	cmp	r2, r3
 8005370:	d04a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800537a:	4b4f      	ldr	r3, [pc, #316]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d043      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005384:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005388:	4b4c      	ldr	r3, [pc, #304]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 800538a:	429a      	cmp	r2, r3
 800538c:	d03c      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005392:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005396:	4b4a      	ldr	r3, [pc, #296]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d035      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053a4:	4b47      	ldr	r3, [pc, #284]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d02e      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053b2:	4b45      	ldr	r3, [pc, #276]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d027      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053c0:	4b42      	ldr	r3, [pc, #264]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0xc94>)
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d020      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ca:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053ce:	4b40      	ldr	r3, [pc, #256]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d019      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053dc:	4b3d      	ldr	r3, [pc, #244]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053de:	429a      	cmp	r2, r3
 80053e0:	d012      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053ea:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d00b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80053f8:	4b38      	ldr	r3, [pc, #224]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xca4>)
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d004      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053fe:	f240 317d 	movw	r1, #893	@ 0x37d
 8005402:	4837      	ldr	r0, [pc, #220]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>)
 8005404:	f7fb fb9c 	bl	8000b40 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005408:	4b36      	ldr	r3, [pc, #216]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a35      	ldr	r2, [pc, #212]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 800540e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005414:	f7fb ff78 	bl	8001308 <HAL_GetTick>
 8005418:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800541c:	e070      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800541e:	bf00      	nop
 8005420:	00010300 	.word	0x00010300
 8005424:	00011300 	.word	0x00011300
 8005428:	00012300 	.word	0x00012300
 800542c:	00013300 	.word	0x00013300
 8005430:	00014300 	.word	0x00014300
 8005434:	00015300 	.word	0x00015300
 8005438:	00016300 	.word	0x00016300
 800543c:	00017300 	.word	0x00017300
 8005440:	00018300 	.word	0x00018300
 8005444:	00019300 	.word	0x00019300
 8005448:	0001a300 	.word	0x0001a300
 800544c:	0001b300 	.word	0x0001b300
 8005450:	0001c300 	.word	0x0001c300
 8005454:	0001d300 	.word	0x0001d300
 8005458:	0001e300 	.word	0x0001e300
 800545c:	0001f300 	.word	0x0001f300
 8005460:	00020300 	.word	0x00020300
 8005464:	00021300 	.word	0x00021300
 8005468:	00022300 	.word	0x00022300
 800546c:	00023300 	.word	0x00023300
 8005470:	00024300 	.word	0x00024300
 8005474:	00025300 	.word	0x00025300
 8005478:	00026300 	.word	0x00026300
 800547c:	00027300 	.word	0x00027300
 8005480:	00028300 	.word	0x00028300
 8005484:	00029300 	.word	0x00029300
 8005488:	0002a300 	.word	0x0002a300
 800548c:	0002b300 	.word	0x0002b300
 8005490:	0002c300 	.word	0x0002c300
 8005494:	0002d300 	.word	0x0002d300
 8005498:	0002e300 	.word	0x0002e300
 800549c:	0002f300 	.word	0x0002f300
 80054a0:	00030300 	.word	0x00030300
 80054a4:	00031300 	.word	0x00031300
 80054a8:	00032300 	.word	0x00032300
 80054ac:	00033300 	.word	0x00033300
 80054b0:	00034300 	.word	0x00034300
 80054b4:	00035300 	.word	0x00035300
 80054b8:	00036300 	.word	0x00036300
 80054bc:	00037300 	.word	0x00037300
 80054c0:	00038300 	.word	0x00038300
 80054c4:	00039300 	.word	0x00039300
 80054c8:	0003a300 	.word	0x0003a300
 80054cc:	0003b300 	.word	0x0003b300
 80054d0:	0003c300 	.word	0x0003c300
 80054d4:	0003d300 	.word	0x0003d300
 80054d8:	0003e300 	.word	0x0003e300
 80054dc:	0003f300 	.word	0x0003f300
 80054e0:	080094e8 	.word	0x080094e8
 80054e4:	58024800 	.word	0x58024800
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e8:	f7fb ff0e 	bl	8001308 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	@ 0x64
 80054f6:	d903      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
      {
        ret = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054fe:	e005      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005500:	4bcf      	ldr	r3, [pc, #828]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1008>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ed      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }

    if (ret == HAL_OK)
 800550c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005510:	2b00      	cmp	r3, #0
 8005512:	d173      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005514:	4bcb      	ldr	r3, [pc, #812]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005516:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005520:	4053      	eors	r3, r2
 8005522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005526:	2b00      	cmp	r3, #0
 8005528:	d015      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800552a:	4bc6      	ldr	r3, [pc, #792]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005532:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005536:	4bc3      	ldr	r3, [pc, #780]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	4ac2      	ldr	r2, [pc, #776]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005540:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005542:	4bc0      	ldr	r3, [pc, #768]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005546:	4abf      	ldr	r2, [pc, #764]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800554e:	4abd      	ldr	r2, [pc, #756]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005554:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800555e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005562:	d118      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fb fed0 	bl	8001308 <HAL_GetTick>
 8005568:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800556c:	e00d      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd52>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f7fb fecb 	bl	8001308 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800557e:	429a      	cmp	r2, r3
 8005580:	d903      	bls.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd52>
          {
            ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005588:	e005      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800558a:	4bae      	ldr	r3, [pc, #696]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0eb      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd36>
          }
        }
      }

      if (ret == HAL_OK)
 8005596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559a:	2b00      	cmp	r3, #0
 800559c:	d129      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ae:	d10e      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xd96>
 80055b0:	4ba4      	ldr	r3, [pc, #656]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c0:	091a      	lsrs	r2, r3, #4
 80055c2:	4ba1      	ldr	r3, [pc, #644]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1010>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	4a9f      	ldr	r2, [pc, #636]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6113      	str	r3, [r2, #16]
 80055cc:	e005      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80055ce:	4b9d      	ldr	r3, [pc, #628]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	4a9c      	ldr	r2, [pc, #624]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055d8:	6113      	str	r3, [r2, #16]
 80055da:	4b9a      	ldr	r3, [pc, #616]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ea:	4a96      	ldr	r2, [pc, #600]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80055f0:	e008      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 0301 	and.w	r3, r2, #1
 8005610:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800561a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800561e:	460b      	mov	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	f000 8089 	beq.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0xf00>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800562c:	2b28      	cmp	r3, #40	@ 0x28
 800562e:	d86b      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xed0>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	08005711 	.word	0x08005711
 800563c:	08005709 	.word	0x08005709
 8005640:	08005709 	.word	0x08005709
 8005644:	08005709 	.word	0x08005709
 8005648:	08005709 	.word	0x08005709
 800564c:	08005709 	.word	0x08005709
 8005650:	08005709 	.word	0x08005709
 8005654:	08005709 	.word	0x08005709
 8005658:	080056dd 	.word	0x080056dd
 800565c:	08005709 	.word	0x08005709
 8005660:	08005709 	.word	0x08005709
 8005664:	08005709 	.word	0x08005709
 8005668:	08005709 	.word	0x08005709
 800566c:	08005709 	.word	0x08005709
 8005670:	08005709 	.word	0x08005709
 8005674:	08005709 	.word	0x08005709
 8005678:	080056f3 	.word	0x080056f3
 800567c:	08005709 	.word	0x08005709
 8005680:	08005709 	.word	0x08005709
 8005684:	08005709 	.word	0x08005709
 8005688:	08005709 	.word	0x08005709
 800568c:	08005709 	.word	0x08005709
 8005690:	08005709 	.word	0x08005709
 8005694:	08005709 	.word	0x08005709
 8005698:	08005711 	.word	0x08005711
 800569c:	08005709 	.word	0x08005709
 80056a0:	08005709 	.word	0x08005709
 80056a4:	08005709 	.word	0x08005709
 80056a8:	08005709 	.word	0x08005709
 80056ac:	08005709 	.word	0x08005709
 80056b0:	08005709 	.word	0x08005709
 80056b4:	08005709 	.word	0x08005709
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005709 	.word	0x08005709
 80056c0:	08005709 	.word	0x08005709
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005709 	.word	0x08005709
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005711 	.word	0x08005711
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e0:	3308      	adds	r3, #8
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f895 	bl	8006814 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00f      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeda>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	3328      	adds	r3, #40	@ 0x28
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 f9ac 	bl	8006a58 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005706:	e004      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeda>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800570e:	e000      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeda>
        break;
 8005710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xef8>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800571a:	4b4a      	ldr	r3, [pc, #296]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005728:	4a46      	ldr	r2, [pc, #280]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800572a:	430b      	orrs	r3, r1
 800572c:	6553      	str	r3, [r2, #84]	@ 0x54
 800572e:	e003      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xf00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0302 	and.w	r3, r2, #2
 8005744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800574e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d041      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfa4>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800575e:	2b05      	cmp	r3, #5
 8005760:	d824      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf74>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <HAL_RCCEx_PeriphCLKConfig+0xf30>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	080057b5 	.word	0x080057b5
 800576c:	08005781 	.word	0x08005781
 8005770:	08005797 	.word	0x08005797
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057b5 	.word	0x080057b5
 800577c:	080057b5 	.word	0x080057b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	3308      	adds	r3, #8
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f843 	bl	8006814 <RCCEx_PLL2_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005794:	e00f      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf7e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3328      	adds	r3, #40	@ 0x28
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f95a 	bl	8006a58 <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057aa:	e004      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b2:	e000      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        break;
 80057b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057be:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	f023 0107 	bic.w	r1, r3, #7
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057d2:	e003      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xfa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f002 0304 	and.w	r3, r2, #4
 80057e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d04b      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x105c>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005804:	2b05      	cmp	r3, #5
 8005806:	d82c      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	0800586b 	.word	0x0800586b
 8005814:	08005829 	.word	0x08005829
 8005818:	0800584d 	.word	0x0800584d
 800581c:	0800586b 	.word	0x0800586b
 8005820:	0800586b 	.word	0x0800586b
 8005824:	0800586b 	.word	0x0800586b
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	3308      	adds	r3, #8
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f000 ffef 	bl	8006814 <RCCEx_PLL2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800583c:	e016      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1034>
 800583e:	bf00      	nop
 8005840:	58024800 	.word	0x58024800
 8005844:	58024400 	.word	0x58024400
 8005848:	00ffffcf 	.word	0x00ffffcf

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	3328      	adds	r3, #40	@ 0x28
 8005852:	2101      	movs	r1, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f8ff 	bl	8006a58 <RCCEx_PLL3_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005860:	e004      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1034>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1034>
        break;
 800586a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1054>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005874:	4b9e      	ldr	r3, [pc, #632]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	f023 0107 	bic.w	r1, r3, #7
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005884:	4a9a      	ldr	r2, [pc, #616]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6593      	str	r3, [r2, #88]	@ 0x58
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x105c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f002 0320 	and.w	r3, r2, #32
 80058a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d055      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1128>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058c0:	d033      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10f2>
 80058c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058c6:	d82c      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058cc:	d02f      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d2:	d826      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 80058d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058d8:	d02b      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
 80058da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058de:	d820      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 80058e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058e4:	d012      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ea:	d81a      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d022      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
 80058f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f4:	d115      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	3308      	adds	r3, #8
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 ff88 	bl	8006814 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800590a:	e015      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f001 f89f 	bl	8006a58 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005920:	e00a      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1120>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005940:	4b6b      	ldr	r3, [pc, #428]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005944:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005950:	4a67      	ldr	r2, [pc, #412]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6553      	str	r3, [r2, #84]	@ 0x54
 8005956:	e003      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800596c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005976:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800597a:	460b      	mov	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	d055      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x11f4>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005988:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800598c:	d033      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 800598e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005992:	d82c      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005998:	d02f      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x11c2>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800599e:	d826      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 80059a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059a4:	d02b      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x11c6>
 80059a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059aa:	d820      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 80059ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b0:	d012      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b6:	d81a      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d022      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 80059bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c0:	d115      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x11b6>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	3308      	adds	r3, #8
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff22 	bl	8006814 <RCCEx_PLL2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059d6:	e015      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	3328      	adds	r3, #40	@ 0x28
 80059de:	2102      	movs	r1, #2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f839 	bl	8006a58 <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059ec:	e00a      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80059f6:	bf00      	nop
 80059f8:	e004      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 8005a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a0c:	4b38      	ldr	r3, [pc, #224]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a10:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a1c:	4a34      	ldr	r2, [pc, #208]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x11f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d057      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a58:	d033      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x128a>
 8005a5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a5e:	d82c      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a64:	d02f      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6a:	d826      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005a6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a70:	d02b      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1292>
 8005a72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a76:	d820      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a7c:	d012      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x126c>
 8005a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a82:	d81a      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d022      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1296>
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8c:	d115      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1282>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	3308      	adds	r3, #8
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 febc 	bl	8006814 <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e015      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	3328      	adds	r3, #40	@ 0x28
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 ffd3 	bl	8006a58 <RCCEx_PLL3_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac0:	e006      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e004      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005adc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ae8:	4a01      	ldr	r2, [pc, #4]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aee:	e005      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
 8005af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f002 0308 	and.w	r3, r2, #8
 8005b08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d03e      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b28:	d018      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b36:	d011      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b50:	d004      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005b52:	f240 510d 	movw	r1, #1293	@ 0x50d
 8005b56:	48ab      	ldr	r0, [pc, #684]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8005b58:	f7fa fff2 	bl	8000b40 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x134c>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	3328      	adds	r3, #40	@ 0x28
 8005b70:	2102      	movs	r1, #2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 ff70 	bl	8006a58 <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x134c>
      {
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b84:	4ba0      	ldr	r3, [pc, #640]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b94:	4a9c      	ldr	r2, [pc, #624]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f002 0310 	and.w	r3, r2, #16
 8005ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d03e      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc6:	d018      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd4:	d011      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bee:	d004      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005bf0:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8005bf4:	4883      	ldr	r0, [pc, #524]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8005bf6:	f7fa ffa3 	bl	8000b40 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c06:	d10c      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0c:	3328      	adds	r3, #40	@ 0x28
 8005c0e:	2102      	movs	r1, #2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 ff21 	bl	8006a58 <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
      {
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c22:	4b79      	ldr	r3, [pc, #484]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c32:	4a75      	ldr	r2, [pc, #468]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d03e      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c64:	d022      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1474>
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6a:	d81b      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x146c>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1440>
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c74:	d00b      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1456>
 8005c76:	e015      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x146c>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fdc7 	bl	8006814 <RCCEx_PLL2_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00f      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1476>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	3328      	adds	r3, #40	@ 0x28
 8005c94:	2102      	movs	r1, #2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fede 	bl	8006a58 <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ca2:	e004      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1476>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1476>
        break;
 8005cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1496>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb6:	4b54      	ldr	r3, [pc, #336]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cc6:	4a50      	ldr	r2, [pc, #320]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ccc:	e003      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ce8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cec:	460b      	mov	r3, r1
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	d03b      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1532>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cfe:	d01f      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1508>
 8005d00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d04:	d818      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1500>
 8005d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x14dc>
 8005d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d10:	d007      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x14ea>
 8005d12:	e011      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b3c      	ldr	r3, [pc, #240]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d20:	e00f      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x150a>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	3328      	adds	r3, #40	@ 0x28
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fe94 	bl	8006a58 <RCCEx_PLL3_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d36:	e004      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x150a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d3e:	e000      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x150a>
        break;
 8005d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x152a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d60:	e003      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d76:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d78:	2300      	movs	r3, #0
 8005d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d80:	460b      	mov	r3, r1
 8005d82:	4313      	orrs	r3, r2
 8005d84:	d046      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x156e>
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9a:	d004      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x156e>
 8005d9c:	f240 5186 	movw	r1, #1414	@ 0x586
 8005da0:	4818      	ldr	r0, [pc, #96]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8005da2:	f7fa fecd 	bl	8000b40 <assert_failed>

    switch (PeriphClkInit->SdmmcClockSelection)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1580>
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d007      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x158e>
 8005db6:	e011      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x15a4>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4a12      	ldr	r2, [pc, #72]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dc4:	e00e      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3308      	adds	r3, #8
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fd20 	bl	8006814 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10f      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	4a03      	ldr	r2, [pc, #12]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e00:	e008      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 8005e02:	bf00      	nop
 8005e04:	080094e8 	.word	0x080094e8
 8005e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e22:	2300      	movs	r3, #0
 8005e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d00c      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1612>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	3328      	adds	r3, #40	@ 0x28
 8005e36:	2102      	movs	r1, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fe0d 	bl	8006a58 <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1612>
    {
      status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e56:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e58:	2300      	movs	r3, #0
 8005e5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d03a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x16a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e72:	d018      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x166e>
 8005e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e78:	d811      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1666>
 8005e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7e:	d014      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1672>
 8005e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e84:	d80b      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1666>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d011      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1676>
 8005e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	4a0e      	ldr	r2, [pc, #56]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8005e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea4:	e004      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e002      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8005eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10d      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x169c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec8:	4a01      	ldr	r2, [pc, #4]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ece:	e005      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x16a4>
 8005ed0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eea:	2300      	movs	r3, #0
 8005eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d019      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x16f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0c:	d004      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005f0e:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 8005f12:	48b8      	ldr	r0, [pc, #736]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8005f14:	f7fa fe14 	bl	8000b40 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f18:	4bb7      	ldr	r3, [pc, #732]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f26:	4ab4      	ldr	r2, [pc, #720]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f42:	460b      	mov	r3, r1
 8005f44:	4313      	orrs	r3, r2
 8005f46:	d01c      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x174a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1734>
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f60:	d004      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1734>
 8005f62:	f240 51ef 	movw	r1, #1519	@ 0x5ef
 8005f66:	48a3      	ldr	r0, [pc, #652]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8005f68:	f7fa fdea 	bl	8000b40 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f6c:	4ba2      	ldr	r3, [pc, #648]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f7c:	4a9e      	ldr	r2, [pc, #632]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f90:	2300      	movs	r3, #0
 8005f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d019      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1786>
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb2:	d004      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1786>
 8005fb4:	f240 51f9 	movw	r1, #1529	@ 0x5f9
 8005fb8:	488e      	ldr	r0, [pc, #568]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8005fba:	f7fa fdc1 	bl	8000b40 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fbe:	4b8e      	ldr	r3, [pc, #568]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fcc:	4a8a      	ldr	r2, [pc, #552]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d020      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x17f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x17da>
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006006:	d004      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x17da>
 8006008:	f240 610f 	movw	r1, #1551	@ 0x60f
 800600c:	4879      	ldr	r0, [pc, #484]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 800600e:	f7fa fd97 	bl	8000b40 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006012:	4b79      	ldr	r3, [pc, #484]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	4a78      	ldr	r2, [pc, #480]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006018:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800601c:	6113      	str	r3, [r2, #16]
 800601e:	4b76      	ldr	r3, [pc, #472]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006020:	6919      	ldr	r1, [r3, #16]
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006026:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800602a:	4a73      	ldr	r2, [pc, #460]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800602c:	430b      	orrs	r3, r1
 800602e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800603c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800603e:	2300      	movs	r3, #0
 8006040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006042:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d01f      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1854>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006052:	2b00      	cmp	r3, #0
 8006054:	d010      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606c:	d004      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 800606e:	f240 6119 	movw	r1, #1561	@ 0x619
 8006072:	4860      	ldr	r0, [pc, #384]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006074:	f7fa fd64 	bl	8000b40 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006078:	4b5f      	ldr	r3, [pc, #380]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800607a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006086:	4a5c      	ldr	r2, [pc, #368]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006088:	430b      	orrs	r3, r1
 800608a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
 800609a:	2300      	movs	r3, #0
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
 800609e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80060a2:	460b      	mov	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d023      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x18b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060c0:	d00b      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060ce:	d004      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 80060d0:	f240 6123 	movw	r1, #1571	@ 0x623
 80060d4:	4847      	ldr	r0, [pc, #284]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 80060d6:	f7fa fd33 	bl	8000b40 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060da:	4b47      	ldr	r3, [pc, #284]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ea:	4a43      	ldr	r2, [pc, #268]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	2100      	movs	r1, #0
 80060fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006102:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d011      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	3308      	adds	r3, #8
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fb7d 	bl	8006814 <RCCEx_PLL2_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	2100      	movs	r1, #0
 800613a:	6239      	str	r1, [r7, #32]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
 8006142:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d011      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1938>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006150:	3308      	adds	r3, #8
 8006152:	2101      	movs	r1, #1
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb5d 	bl	8006814 <RCCEx_PLL2_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1938>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	2100      	movs	r1, #0
 800617a:	61b9      	str	r1, [r7, #24]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d011      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1978>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006190:	3308      	adds	r3, #8
 8006192:	2102      	movs	r1, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb3d 	bl	8006814 <RCCEx_PLL2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1978>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	2100      	movs	r1, #0
 80061ba:	6139      	str	r1, [r7, #16]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	d017      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x19c4>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	3328      	adds	r3, #40	@ 0x28
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fc3f 	bl	8006a58 <RCCEx_PLL3_Config>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80061e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x19c4>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80061f0:	e004      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x19c4>
 80061f2:	bf00      	nop
 80061f4:	080094e8 	.word	0x080094e8
 80061f8:	58024400 	.word	0x58024400
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	2100      	movs	r1, #0
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d011      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a04>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	3328      	adds	r3, #40	@ 0x28
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fc19 	bl	8006a58 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800622c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a04>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	2100      	movs	r1, #0
 8006246:	6039      	str	r1, [r7, #0]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	d011      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1a44>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	3328      	adds	r3, #40	@ 0x28
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fbf9 	bl	8006a58 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800626c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1a44>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800627c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
  {
    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1a52>
  }
  return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
}
 800628a:	4618      	mov	r0, r3
 800628c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006290:	46bd      	mov	sp, r7
 8006292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006296:	bf00      	nop

08006298 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800629c:	f7fe fa70 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	091b      	lsrs	r3, r3, #4
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4904      	ldr	r1, [pc, #16]	@ (80062c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	58024400 	.word	0x58024400
 80062c0:	0800959c 	.word	0x0800959c

080062c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	@ 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80062d6:	4b9f      	ldr	r3, [pc, #636]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	0b1b      	lsrs	r3, r3, #12
 80062dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	091b      	lsrs	r3, r3, #4
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062ee:	4b99      	ldr	r3, [pc, #612]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8111 	beq.w	8006534 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b02      	cmp	r3, #2
 8006316:	f000 8083 	beq.w	8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b02      	cmp	r3, #2
 800631e:	f200 80a1 	bhi.w	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d056      	beq.n	80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800632e:	e099      	b.n	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006330:	4b88      	ldr	r3, [pc, #544]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02d      	beq.n	8006398 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800633c:	4b85      	ldr	r3, [pc, #532]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	08db      	lsrs	r3, r3, #3
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	4a84      	ldr	r2, [pc, #528]	@ (8006558 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006366:	4b7b      	ldr	r3, [pc, #492]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006376:	ed97 6a03 	vldr	s12, [r7, #12]
 800637a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800655c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800637e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006396:	e087      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80063be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800655c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063da:	e065      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ee:	4b59      	ldr	r3, [pc, #356]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006402:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800655c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800641e:	e043      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b48      	ldr	r3, [pc, #288]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800655c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006462:	e021      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b37      	ldr	r3, [pc, #220]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800655c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80064a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	0a5b      	lsrs	r3, r3, #9
 80064ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ce:	ee17 2a90 	vmov	r2, s15
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80064d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fc:	ee17 2a90 	vmov	r2, s15
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006504:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	0e1b      	lsrs	r3, r3, #24
 800650a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800651a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800651e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800652a:	ee17 2a90 	vmov	r2, s15
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006532:	e008      	b.n	8006546 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	609a      	str	r2, [r3, #8]
}
 8006546:	bf00      	nop
 8006548:	3724      	adds	r7, #36	@ 0x24
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	58024400 	.word	0x58024400
 8006558:	03d09000 	.word	0x03d09000
 800655c:	46000000 	.word	0x46000000
 8006560:	4c742400 	.word	0x4c742400
 8006564:	4a742400 	.word	0x4a742400
 8006568:	4af42400 	.word	0x4af42400

0800656c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	@ 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006574:	4ba1      	ldr	r3, [pc, #644]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800657e:	4b9f      	ldr	r3, [pc, #636]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	0d1b      	lsrs	r3, r3, #20
 8006584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006588:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800658a:	4b9c      	ldr	r3, [pc, #624]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006596:	4b99      	ldr	r3, [pc, #612]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	08db      	lsrs	r3, r3, #3
 800659c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8111 	beq.w	80067dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	f000 8083 	beq.w	80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	f200 80a1 	bhi.w	800670c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d056      	beq.n	8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065d6:	e099      	b.n	800670c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d8:	4b88      	ldr	r3, [pc, #544]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d02d      	beq.n	8006640 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e4:	4b85      	ldr	r3, [pc, #532]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	08db      	lsrs	r3, r3, #3
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	4a84      	ldr	r2, [pc, #528]	@ (8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
 80065f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660e:	4b7b      	ldr	r3, [pc, #492]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006622:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800663e:	e087      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b6a      	ldr	r3, [pc, #424]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a03 	vldr	s12, [r7, #12]
 8006666:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006682:	e065      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800680c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b59      	ldr	r3, [pc, #356]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c6:	e043      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b48      	ldr	r3, [pc, #288]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670a:	e021      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800680c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b37      	ldr	r3, [pc, #220]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006732:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006750:	4b2a      	ldr	r3, [pc, #168]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006754:	0a5b      	lsrs	r3, r3, #9
 8006756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800676a:	edd7 6a07 	vldr	s13, [r7, #28]
 800676e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006776:	ee17 2a90 	vmov	r2, s15
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800677e:	4b1f      	ldr	r3, [pc, #124]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006798:	edd7 6a07 	vldr	s13, [r7, #28]
 800679c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a4:	ee17 2a90 	vmov	r2, s15
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80067ac:	4b13      	ldr	r3, [pc, #76]	@ (80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	0e1b      	lsrs	r3, r3, #24
 80067b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d2:	ee17 2a90 	vmov	r2, s15
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067da:	e008      	b.n	80067ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	609a      	str	r2, [r3, #8]
}
 80067ee:	bf00      	nop
 80067f0:	3724      	adds	r7, #36	@ 0x24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	58024400 	.word	0x58024400
 8006800:	03d09000 	.word	0x03d09000
 8006804:	46000000 	.word	0x46000000
 8006808:	4c742400 	.word	0x4c742400
 800680c:	4a742400 	.word	0x4a742400
 8006810:	4af42400 	.word	0x4af42400

08006814 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <RCCEx_PLL2_Config+0x1e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006830:	d904      	bls.n	800683c <RCCEx_PLL2_Config+0x28>
 8006832:	f640 6172 	movw	r1, #3698	@ 0xe72
 8006836:	4885      	ldr	r0, [pc, #532]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 8006838:	f7fa f982 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d904      	bls.n	800684e <RCCEx_PLL2_Config+0x3a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800684c:	d904      	bls.n	8006858 <RCCEx_PLL2_Config+0x44>
 800684e:	f640 6173 	movw	r1, #3699	@ 0xe73
 8006852:	487e      	ldr	r0, [pc, #504]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 8006854:	f7fa f974 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <RCCEx_PLL2_Config+0x54>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b80      	cmp	r3, #128	@ 0x80
 8006866:	d904      	bls.n	8006872 <RCCEx_PLL2_Config+0x5e>
 8006868:	f640 6174 	movw	r1, #3700	@ 0xe74
 800686c:	4877      	ldr	r0, [pc, #476]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 800686e:	f7fa f967 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <RCCEx_PLL2_Config+0x6e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b80      	cmp	r3, #128	@ 0x80
 8006880:	d904      	bls.n	800688c <RCCEx_PLL2_Config+0x78>
 8006882:	f640 6175 	movw	r1, #3701	@ 0xe75
 8006886:	4871      	ldr	r0, [pc, #452]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 8006888:	f7fa f95a 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <RCCEx_PLL2_Config+0x88>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b80      	cmp	r3, #128	@ 0x80
 800689a:	d904      	bls.n	80068a6 <RCCEx_PLL2_Config+0x92>
 800689c:	f640 6176 	movw	r1, #3702	@ 0xe76
 80068a0:	486a      	ldr	r0, [pc, #424]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 80068a2:	f7fa f94d 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <RCCEx_PLL2_Config+0xbc>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b40      	cmp	r3, #64	@ 0x40
 80068b4:	d00c      	beq.n	80068d0 <RCCEx_PLL2_Config+0xbc>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	2b80      	cmp	r3, #128	@ 0x80
 80068bc:	d008      	beq.n	80068d0 <RCCEx_PLL2_Config+0xbc>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c4:	d004      	beq.n	80068d0 <RCCEx_PLL2_Config+0xbc>
 80068c6:	f640 6177 	movw	r1, #3703	@ 0xe77
 80068ca:	4860      	ldr	r0, [pc, #384]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 80068cc:	f7fa f938 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <RCCEx_PLL2_Config+0xd6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d004      	beq.n	80068ea <RCCEx_PLL2_Config+0xd6>
 80068e0:	f640 6178 	movw	r1, #3704	@ 0xe78
 80068e4:	4859      	ldr	r0, [pc, #356]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 80068e6:	f7fa f92b 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f2:	d304      	bcc.n	80068fe <RCCEx_PLL2_Config+0xea>
 80068f4:	f640 6179 	movw	r1, #3705	@ 0xe79
 80068f8:	4854      	ldr	r0, [pc, #336]	@ (8006a4c <RCCEx_PLL2_Config+0x238>)
 80068fa:	f7fa f921 	bl	8000b40 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068fe:	4b54      	ldr	r3, [pc, #336]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d101      	bne.n	800690e <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e099      	b.n	8006a42 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800690e:	4b50      	ldr	r3, [pc, #320]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a4f      	ldr	r2, [pc, #316]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006914:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fa fcf5 	bl	8001308 <HAL_GetTick>
 800691e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006920:	e008      	b.n	8006934 <RCCEx_PLL2_Config+0x120>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006922:	f7fa fcf1 	bl	8001308 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e086      	b.n	8006a42 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006934:	4b46      	ldr	r3, [pc, #280]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006940:	4b43      	ldr	r3, [pc, #268]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	4940      	ldr	r1, [pc, #256]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006950:	4313      	orrs	r3, r2
 8006952:	628b      	str	r3, [r1, #40]	@ 0x28
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	3b01      	subs	r3, #1
 8006964:	025b      	lsls	r3, r3, #9
 8006966:	b29b      	uxth	r3, r3
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	3b01      	subs	r3, #1
 800697e:	061b      	lsls	r3, r3, #24
 8006980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006984:	4932      	ldr	r1, [pc, #200]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800698a:	4b31      	ldr	r3, [pc, #196]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	492e      	ldr	r1, [pc, #184]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800699c:	4b2c      	ldr	r3, [pc, #176]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	f023 0220 	bic.w	r2, r3, #32
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	4929      	ldr	r1, [pc, #164]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069ae:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b2:	4a27      	ldr	r2, [pc, #156]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069ba:	4b25      	ldr	r3, [pc, #148]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069be:	4b25      	ldr	r3, [pc, #148]	@ (8006a54 <RCCEx_PLL2_Config+0x240>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	69d2      	ldr	r2, [r2, #28]
 80069c6:	00d2      	lsls	r2, r2, #3
 80069c8:	4921      	ldr	r1, [pc, #132]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069d4:	f043 0310 	orr.w	r3, r3, #16
 80069d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069ec:	e00f      	b.n	8006a0e <RCCEx_PLL2_Config+0x1fa>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069f4:	4b16      	ldr	r3, [pc, #88]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	4a15      	ldr	r2, [pc, #84]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 80069fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a00:	e005      	b.n	8006a0e <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a02:	4b13      	ldr	r3, [pc, #76]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	4a12      	ldr	r2, [pc, #72]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006a08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a0e:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a0f      	ldr	r2, [pc, #60]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1a:	f7fa fc75 	bl	8001308 <HAL_GetTick>
 8006a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a20:	e008      	b.n	8006a34 <RCCEx_PLL2_Config+0x220>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a22:	f7fa fc71 	bl	8001308 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <RCCEx_PLL2_Config+0x23c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	080094e8 	.word	0x080094e8
 8006a50:	58024400 	.word	0x58024400
 8006a54:	ffff0007 	.word	0xffff0007

08006a58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <RCCEx_PLL3_Config+0x1e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a74:	d904      	bls.n	8006a80 <RCCEx_PLL3_Config+0x28>
 8006a76:	f640 61da 	movw	r1, #3802	@ 0xeda
 8006a7a:	4887      	ldr	r0, [pc, #540]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006a7c:	f7fa f860 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d904      	bls.n	8006a92 <RCCEx_PLL3_Config+0x3a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a90:	d904      	bls.n	8006a9c <RCCEx_PLL3_Config+0x44>
 8006a92:	f640 61db 	movw	r1, #3803	@ 0xedb
 8006a96:	4880      	ldr	r0, [pc, #512]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006a98:	f7fa f852 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <RCCEx_PLL3_Config+0x54>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b80      	cmp	r3, #128	@ 0x80
 8006aaa:	d904      	bls.n	8006ab6 <RCCEx_PLL3_Config+0x5e>
 8006aac:	f640 61dc 	movw	r1, #3804	@ 0xedc
 8006ab0:	4879      	ldr	r0, [pc, #484]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006ab2:	f7fa f845 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <RCCEx_PLL3_Config+0x6e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	d904      	bls.n	8006ad0 <RCCEx_PLL3_Config+0x78>
 8006ac6:	f640 61dd 	movw	r1, #3805	@ 0xedd
 8006aca:	4873      	ldr	r0, [pc, #460]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006acc:	f7fa f838 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <RCCEx_PLL3_Config+0x88>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b80      	cmp	r3, #128	@ 0x80
 8006ade:	d904      	bls.n	8006aea <RCCEx_PLL3_Config+0x92>
 8006ae0:	f640 61de 	movw	r1, #3806	@ 0xede
 8006ae4:	486c      	ldr	r0, [pc, #432]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006ae6:	f7fa f82b 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d013      	beq.n	8006b1a <RCCEx_PLL3_Config+0xc2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afa:	d00e      	beq.n	8006b1a <RCCEx_PLL3_Config+0xc2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b04:	d009      	beq.n	8006b1a <RCCEx_PLL3_Config+0xc2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b0e:	d004      	beq.n	8006b1a <RCCEx_PLL3_Config+0xc2>
 8006b10:	f640 61df 	movw	r1, #3807	@ 0xedf
 8006b14:	4860      	ldr	r0, [pc, #384]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006b16:	f7fa f813 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <RCCEx_PLL3_Config+0xde>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b2a:	d004      	beq.n	8006b36 <RCCEx_PLL3_Config+0xde>
 8006b2c:	f44f 616e 	mov.w	r1, #3808	@ 0xee0
 8006b30:	4859      	ldr	r0, [pc, #356]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006b32:	f7fa f805 	bl	8000b40 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3e:	d304      	bcc.n	8006b4a <RCCEx_PLL3_Config+0xf2>
 8006b40:	f640 61e1 	movw	r1, #3809	@ 0xee1
 8006b44:	4854      	ldr	r0, [pc, #336]	@ (8006c98 <RCCEx_PLL3_Config+0x240>)
 8006b46:	f7f9 fffb 	bl	8000b40 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b4a:	4b54      	ldr	r3, [pc, #336]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d101      	bne.n	8006b5a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e099      	b.n	8006c8e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b5a:	4b50      	ldr	r3, [pc, #320]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b66:	f7fa fbcf 	bl	8001308 <HAL_GetTick>
 8006b6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <RCCEx_PLL3_Config+0x128>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b6e:	f7fa fbcb 	bl	8001308 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e086      	b.n	8006c8e <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b80:	4b46      	ldr	r3, [pc, #280]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b8c:	4b43      	ldr	r3, [pc, #268]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	051b      	lsls	r3, r3, #20
 8006b9a:	4940      	ldr	r1, [pc, #256]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	025b      	lsls	r3, r3, #9
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	061b      	lsls	r3, r3, #24
 8006bcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bd0:	4932      	ldr	r1, [pc, #200]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bd6:	4b31      	ldr	r3, [pc, #196]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	492e      	ldr	r1, [pc, #184]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006be8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	4929      	ldr	r1, [pc, #164]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bfa:	4b28      	ldr	r3, [pc, #160]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4a27      	ldr	r2, [pc, #156]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c06:	4b25      	ldr	r3, [pc, #148]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c0a:	4b25      	ldr	r3, [pc, #148]	@ (8006ca0 <RCCEx_PLL3_Config+0x248>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	69d2      	ldr	r2, [r2, #28]
 8006c12:	00d2      	lsls	r2, r2, #3
 8006c14:	4921      	ldr	r1, [pc, #132]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c1a:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	4a1a      	ldr	r2, [pc, #104]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c38:	e00f      	b.n	8006c5a <RCCEx_PLL3_Config+0x202>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c40:	4b16      	ldr	r3, [pc, #88]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c44:	4a15      	ldr	r2, [pc, #84]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c4c:	e005      	b.n	8006c5a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c4e:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4a12      	ldr	r2, [pc, #72]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c66:	f7fa fb4f 	bl	8001308 <HAL_GetTick>
 8006c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c6c:	e008      	b.n	8006c80 <RCCEx_PLL3_Config+0x228>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c6e:	f7fa fb4b 	bl	8001308 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <RCCEx_PLL3_Config+0x244>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	080094e8 	.word	0x080094e8
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	ffff0007 	.word	0xffff0007

08006ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0ab      	b.n	8006e0e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d032      	beq.n	8006d24 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a55      	ldr	r2, [pc, #340]	@ (8006e18 <HAL_UART_Init+0x174>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d05f      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a53      	ldr	r2, [pc, #332]	@ (8006e1c <HAL_UART_Init+0x178>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d05a      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a52      	ldr	r2, [pc, #328]	@ (8006e20 <HAL_UART_Init+0x17c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d055      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a50      	ldr	r2, [pc, #320]	@ (8006e24 <HAL_UART_Init+0x180>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d050      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4f      	ldr	r2, [pc, #316]	@ (8006e28 <HAL_UART_Init+0x184>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d04b      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8006e2c <HAL_UART_Init+0x188>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d046      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8006e30 <HAL_UART_Init+0x18c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d041      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a4a      	ldr	r2, [pc, #296]	@ (8006e34 <HAL_UART_Init+0x190>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d03c      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a49      	ldr	r2, [pc, #292]	@ (8006e38 <HAL_UART_Init+0x194>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d037      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d18:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8006d1c:	4847      	ldr	r0, [pc, #284]	@ (8006e3c <HAL_UART_Init+0x198>)
 8006d1e:	f7f9 ff0f 	bl	8000b40 <assert_failed>
 8006d22:	e031      	b.n	8006d88 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3b      	ldr	r2, [pc, #236]	@ (8006e18 <HAL_UART_Init+0x174>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d02c      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3a      	ldr	r2, [pc, #232]	@ (8006e1c <HAL_UART_Init+0x178>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d027      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a38      	ldr	r2, [pc, #224]	@ (8006e20 <HAL_UART_Init+0x17c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d022      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a37      	ldr	r2, [pc, #220]	@ (8006e24 <HAL_UART_Init+0x180>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d01d      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a35      	ldr	r2, [pc, #212]	@ (8006e28 <HAL_UART_Init+0x184>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d018      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a34      	ldr	r2, [pc, #208]	@ (8006e2c <HAL_UART_Init+0x188>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a32      	ldr	r2, [pc, #200]	@ (8006e30 <HAL_UART_Init+0x18c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a31      	ldr	r2, [pc, #196]	@ (8006e34 <HAL_UART_Init+0x190>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2f      	ldr	r2, [pc, #188]	@ (8006e38 <HAL_UART_Init+0x194>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_UART_Init+0xe4>
 8006d7e:	f240 1143 	movw	r1, #323	@ 0x143
 8006d82:	482e      	ldr	r0, [pc, #184]	@ (8006e3c <HAL_UART_Init+0x198>)
 8006d84:	f7f9 fedc 	bl	8000b40 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa f870 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	@ 0x24
 8006da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fa5b 	bl	800827c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fc14 	bl	80075f4 <UART_SetConfig>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x132>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e01b      	b.n	8006e0e <HAL_UART_Init+0x16a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006de4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006df4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fbac 	bl	8008564 <UART_CheckIdleState>
 8006e0c:	4603      	mov	r3, r0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40004400 	.word	0x40004400
 8006e20:	40004800 	.word	0x40004800
 8006e24:	40004c00 	.word	0x40004c00
 8006e28:	40005000 	.word	0x40005000
 8006e2c:	40011400 	.word	0x40011400
 8006e30:	40007800 	.word	0x40007800
 8006e34:	40007c00 	.word	0x40007c00
 8006e38:	58000c00 	.word	0x58000c00
 8006e3c:	08009524 	.word	0x08009524

08006e40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b0ba      	sub	sp, #232	@ 0xe8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e6e:	4013      	ands	r3, r2
 8006e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d015      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8377 	beq.w	8007598 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
      }
      return;
 8006eb2:	e371      	b.n	8007598 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8123 	beq.w	8007104 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ebe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ec2:	4b8d      	ldr	r3, [pc, #564]	@ (80070f8 <HAL_UART_IRQHandler+0x2b8>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ece:	4b8b      	ldr	r3, [pc, #556]	@ (80070fc <HAL_UART_IRQHandler+0x2bc>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 8116 	beq.w	8007104 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d011      	beq.n	8006f08 <HAL_UART_IRQHandler+0xc8>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	f043 0201 	orr.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d011      	beq.n	8006f38 <HAL_UART_IRQHandler+0xf8>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2202      	movs	r2, #2
 8006f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2e:	f043 0204 	orr.w	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d011      	beq.n	8006f68 <HAL_UART_IRQHandler+0x128>
 8006f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2204      	movs	r2, #4
 8006f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	f043 0202 	orr.w	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d017      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f84:	4b5c      	ldr	r3, [pc, #368]	@ (80070f8 <HAL_UART_IRQHandler+0x2b8>)
 8006f86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2208      	movs	r2, #8
 8006f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x196>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00c      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fcc:	f043 0220 	orr.w	r2, r3, #32
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 82dd 	beq.w	800759c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d013      	beq.n	8007016 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702a:	2b40      	cmp	r3, #64	@ 0x40
 800702c:	d005      	beq.n	800703a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800702e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007036:	2b00      	cmp	r3, #0
 8007038:	d054      	beq.n	80070e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fbaa 	bl	8008794 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d146      	bne.n	80070dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800706c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800707a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800707e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1d9      	bne.n	800704e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d017      	beq.n	80070d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070aa:	4a15      	ldr	r2, [pc, #84]	@ (8007100 <HAL_UART_IRQHandler+0x2c0>)
 80070ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fa fddf 	bl	8001c78 <HAL_DMA_Abort_IT>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d019      	beq.n	80070f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070ce:	4610      	mov	r0, r2
 80070d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d2:	e00f      	b.n	80070f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa77 	bl	80075c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	e00b      	b.n	80070f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa73 	bl	80075c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e2:	e007      	b.n	80070f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa6f 	bl	80075c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80070f2:	e253      	b.n	800759c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	bf00      	nop
    return;
 80070f6:	e251      	b.n	800759c <HAL_UART_IRQHandler+0x75c>
 80070f8:	10000001 	.word	0x10000001
 80070fc:	04000120 	.word	0x04000120
 8007100:	08008861 	.word	0x08008861

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007108:	2b01      	cmp	r3, #1
 800710a:	f040 81e7 	bne.w	80074dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 81e0 	beq.w	80074dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 81d9 	beq.w	80074dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	f040 8151 	bne.w	80073e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a96      	ldr	r2, [pc, #600]	@ (80073a4 <HAL_UART_IRQHandler+0x564>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d068      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a93      	ldr	r2, [pc, #588]	@ (80073a8 <HAL_UART_IRQHandler+0x568>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d061      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a91      	ldr	r2, [pc, #580]	@ (80073ac <HAL_UART_IRQHandler+0x56c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05a      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a8e      	ldr	r2, [pc, #568]	@ (80073b0 <HAL_UART_IRQHandler+0x570>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d053      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a8c      	ldr	r2, [pc, #560]	@ (80073b4 <HAL_UART_IRQHandler+0x574>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d04c      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a89      	ldr	r2, [pc, #548]	@ (80073b8 <HAL_UART_IRQHandler+0x578>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a87      	ldr	r2, [pc, #540]	@ (80073bc <HAL_UART_IRQHandler+0x57c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d03e      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a84      	ldr	r2, [pc, #528]	@ (80073c0 <HAL_UART_IRQHandler+0x580>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d037      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a82      	ldr	r2, [pc, #520]	@ (80073c4 <HAL_UART_IRQHandler+0x584>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d030      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a7f      	ldr	r2, [pc, #508]	@ (80073c8 <HAL_UART_IRQHandler+0x588>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d029      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a7d      	ldr	r2, [pc, #500]	@ (80073cc <HAL_UART_IRQHandler+0x58c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a7a      	ldr	r2, [pc, #488]	@ (80073d0 <HAL_UART_IRQHandler+0x590>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d01b      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a78      	ldr	r2, [pc, #480]	@ (80073d4 <HAL_UART_IRQHandler+0x594>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d014      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a75      	ldr	r2, [pc, #468]	@ (80073d8 <HAL_UART_IRQHandler+0x598>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00d      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a73      	ldr	r2, [pc, #460]	@ (80073dc <HAL_UART_IRQHandler+0x59c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d006      	beq.n	8007222 <HAL_UART_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a70      	ldr	r2, [pc, #448]	@ (80073e0 <HAL_UART_IRQHandler+0x5a0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d106      	bne.n	8007230 <HAL_UART_IRQHandler+0x3f0>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b29b      	uxth	r3, r3
 800722e:	e005      	b.n	800723c <HAL_UART_IRQHandler+0x3fc>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 81ab 	beq.w	80075a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007250:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007254:	429a      	cmp	r2, r3
 8007256:	f080 81a3 	bcs.w	80075a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007260:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007270:	f000 8087 	beq.w	8007382 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800728c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800729e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1da      	bne.n	8007274 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e1      	bne.n	80072be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800730a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800730c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800731e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800732c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e3      	bne.n	80072fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800734e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007350:	f023 0310 	bic.w	r3, r3, #16
 8007354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007362:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e4      	bne.n	8007340 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737c:	4618      	mov	r0, r3
 800737e:	f7fa f95d 	bl	800163c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007394:	b29b      	uxth	r3, r3
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f91d 	bl	80075dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073a2:	e0fd      	b.n	80075a0 <HAL_UART_IRQHandler+0x760>
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80cf 	beq.w	80075a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80ca 	beq.w	80075a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800741e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007424:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007432:	647b      	str	r3, [r7, #68]	@ 0x44
 8007434:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e4      	bne.n	8007410 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	623b      	str	r3, [r7, #32]
   return(result);
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	4b55      	ldr	r3, [pc, #340]	@ (80075b0 <HAL_UART_IRQHandler+0x770>)
 800745a:	4013      	ands	r3, r2
 800745c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800746a:	633a      	str	r2, [r7, #48]	@ 0x30
 800746c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e3      	bne.n	8007446 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	617b      	str	r3, [r7, #20]
   return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e4      	bne.n	8007492 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f881 	bl	80075dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074da:	e063      	b.n	80075a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00e      	beq.n	8007506 <HAL_UART_IRQHandler+0x6c6>
 80074e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f9ef 	bl	80088e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007504:	e051      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d014      	beq.n	800753c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800751e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800752e:	2b00      	cmp	r3, #0
 8007530:	d03a      	beq.n	80075a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
    }
    return;
 800753a:	e035      	b.n	80075a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <HAL_UART_IRQHandler+0x71c>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f999 	bl	800888c <UART_EndTransmit_IT>
    return;
 800755a:	e026      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800755c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <HAL_UART_IRQHandler+0x73c>
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800756c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f9c8 	bl	800890a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800757a:	e016      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d010      	beq.n	80075aa <HAL_UART_IRQHandler+0x76a>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758c:	2b00      	cmp	r3, #0
 800758e:	da0c      	bge.n	80075aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f9b0 	bl	80088f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007596:	e008      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
      return;
 8007598:	bf00      	nop
 800759a:	e006      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
    return;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
      return;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
      return;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_UART_IRQHandler+0x76a>
    return;
 80075a8:	bf00      	nop
  }
}
 80075aa:	37e8      	adds	r7, #232	@ 0xe8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	effffffe 	.word	0xeffffffe

080075b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f8:	b092      	sub	sp, #72	@ 0x48
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a17      	ldr	r2, [pc, #92]	@ (8007668 <UART_SetConfig+0x74>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d904      	bls.n	8007618 <UART_SetConfig+0x24>
 800760e:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8007612:	4816      	ldr	r0, [pc, #88]	@ (800766c <UART_SetConfig+0x78>)
 8007614:	f7f9 fa94 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007620:	d00d      	beq.n	800763e <UART_SetConfig+0x4a>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <UART_SetConfig+0x4a>
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007632:	d004      	beq.n	800763e <UART_SetConfig+0x4a>
 8007634:	f640 31ca 	movw	r1, #3018	@ 0xbca
 8007638:	480c      	ldr	r0, [pc, #48]	@ (800766c <UART_SetConfig+0x78>)
 800763a:	f7f9 fa81 	bl	8000b40 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a0b      	ldr	r2, [pc, #44]	@ (8007670 <UART_SetConfig+0x7c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d115      	bne.n	8007674 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d037      	beq.n	80076c0 <UART_SetConfig+0xcc>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007658:	d032      	beq.n	80076c0 <UART_SetConfig+0xcc>
 800765a:	f640 31cd 	movw	r1, #3021	@ 0xbcd
 800765e:	4803      	ldr	r0, [pc, #12]	@ (800766c <UART_SetConfig+0x78>)
 8007660:	f7f9 fa6e 	bl	8000b40 <assert_failed>
 8007664:	e02c      	b.n	80076c0 <UART_SetConfig+0xcc>
 8007666:	bf00      	nop
 8007668:	00bebc20 	.word	0x00bebc20
 800766c:	08009524 	.word	0x08009524
 8007670:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767c:	d012      	beq.n	80076a4 <UART_SetConfig+0xb0>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00e      	beq.n	80076a4 <UART_SetConfig+0xb0>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800768e:	d009      	beq.n	80076a4 <UART_SetConfig+0xb0>
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007698:	d004      	beq.n	80076a4 <UART_SetConfig+0xb0>
 800769a:	f640 31d1 	movw	r1, #3025	@ 0xbd1
 800769e:	48a5      	ldr	r0, [pc, #660]	@ (8007934 <UART_SetConfig+0x340>)
 80076a0:	f7f9 fa4e 	bl	8000b40 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <UART_SetConfig+0xcc>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b4:	d004      	beq.n	80076c0 <UART_SetConfig+0xcc>
 80076b6:	f640 31d2 	movw	r1, #3026	@ 0xbd2
 80076ba:	489e      	ldr	r0, [pc, #632]	@ (8007934 <UART_SetConfig+0x340>)
 80076bc:	f7f9 fa40 	bl	8000b40 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <UART_SetConfig+0xf2>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d0:	d009      	beq.n	80076e6 <UART_SetConfig+0xf2>
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80076da:	d004      	beq.n	80076e6 <UART_SetConfig+0xf2>
 80076dc:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 80076e0:	4894      	ldr	r0, [pc, #592]	@ (8007934 <UART_SetConfig+0x340>)
 80076e2:	f7f9 fa2d 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f023 030c 	bic.w	r3, r3, #12
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <UART_SetConfig+0x106>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <UART_SetConfig+0x110>
 80076fa:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 80076fe:	488d      	ldr	r0, [pc, #564]	@ (8007934 <UART_SetConfig+0x340>)
 8007700:	f7f9 fa1e 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d013      	beq.n	8007734 <UART_SetConfig+0x140>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007714:	d00e      	beq.n	8007734 <UART_SetConfig+0x140>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771e:	d009      	beq.n	8007734 <UART_SetConfig+0x140>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007728:	d004      	beq.n	8007734 <UART_SetConfig+0x140>
 800772a:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 800772e:	4881      	ldr	r0, [pc, #516]	@ (8007934 <UART_SetConfig+0x340>)
 8007730:	f7f9 fa06 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <UART_SetConfig+0x15c>
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007744:	d004      	beq.n	8007750 <UART_SetConfig+0x15c>
 8007746:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 800774a:	487a      	ldr	r0, [pc, #488]	@ (8007934 <UART_SetConfig+0x340>)
 800774c:	f7f9 f9f8 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d030      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	2b01      	cmp	r3, #1
 800775e:	d02c      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	2b02      	cmp	r3, #2
 8007766:	d028      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	2b03      	cmp	r3, #3
 800776e:	d024      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	2b04      	cmp	r3, #4
 8007776:	d020      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	2b05      	cmp	r3, #5
 800777e:	d01c      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	2b06      	cmp	r3, #6
 8007786:	d018      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778c:	2b07      	cmp	r3, #7
 800778e:	d014      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	2b08      	cmp	r3, #8
 8007796:	d010      	beq.n	80077ba <UART_SetConfig+0x1c6>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	2b09      	cmp	r3, #9
 800779e:	d00c      	beq.n	80077ba <UART_SetConfig+0x1c6>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	2b0a      	cmp	r3, #10
 80077a6:	d008      	beq.n	80077ba <UART_SetConfig+0x1c6>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	2b0b      	cmp	r3, #11
 80077ae:	d004      	beq.n	80077ba <UART_SetConfig+0x1c6>
 80077b0:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 80077b4:	485f      	ldr	r0, [pc, #380]	@ (8007934 <UART_SetConfig+0x340>)
 80077b6:	f7f9 f9c3 	bl	8000b40 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	431a      	orrs	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b57      	ldr	r3, [pc, #348]	@ (8007938 <UART_SetConfig+0x344>)
 80077da:	4013      	ands	r3, r2
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077e2:	430b      	orrs	r3, r1
 80077e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a4d      	ldr	r2, [pc, #308]	@ (800793c <UART_SetConfig+0x348>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007812:	4313      	orrs	r3, r2
 8007814:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	4b48      	ldr	r3, [pc, #288]	@ (8007940 <UART_SetConfig+0x34c>)
 800781e:	4013      	ands	r3, r2
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007826:	430b      	orrs	r3, r1
 8007828:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	f023 010f 	bic.w	r1, r3, #15
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3f      	ldr	r2, [pc, #252]	@ (8007944 <UART_SetConfig+0x350>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f040 8084 	bne.w	8007954 <UART_SetConfig+0x360>
 800784c:	4b3e      	ldr	r3, [pc, #248]	@ (8007948 <UART_SetConfig+0x354>)
 800784e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007854:	2b28      	cmp	r3, #40	@ 0x28
 8007856:	d879      	bhi.n	800794c <UART_SetConfig+0x358>
 8007858:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0x26c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007905 	.word	0x08007905
 8007864:	0800794d 	.word	0x0800794d
 8007868:	0800794d 	.word	0x0800794d
 800786c:	0800794d 	.word	0x0800794d
 8007870:	0800794d 	.word	0x0800794d
 8007874:	0800794d 	.word	0x0800794d
 8007878:	0800794d 	.word	0x0800794d
 800787c:	0800794d 	.word	0x0800794d
 8007880:	0800790d 	.word	0x0800790d
 8007884:	0800794d 	.word	0x0800794d
 8007888:	0800794d 	.word	0x0800794d
 800788c:	0800794d 	.word	0x0800794d
 8007890:	0800794d 	.word	0x0800794d
 8007894:	0800794d 	.word	0x0800794d
 8007898:	0800794d 	.word	0x0800794d
 800789c:	0800794d 	.word	0x0800794d
 80078a0:	08007915 	.word	0x08007915
 80078a4:	0800794d 	.word	0x0800794d
 80078a8:	0800794d 	.word	0x0800794d
 80078ac:	0800794d 	.word	0x0800794d
 80078b0:	0800794d 	.word	0x0800794d
 80078b4:	0800794d 	.word	0x0800794d
 80078b8:	0800794d 	.word	0x0800794d
 80078bc:	0800794d 	.word	0x0800794d
 80078c0:	0800791d 	.word	0x0800791d
 80078c4:	0800794d 	.word	0x0800794d
 80078c8:	0800794d 	.word	0x0800794d
 80078cc:	0800794d 	.word	0x0800794d
 80078d0:	0800794d 	.word	0x0800794d
 80078d4:	0800794d 	.word	0x0800794d
 80078d8:	0800794d 	.word	0x0800794d
 80078dc:	0800794d 	.word	0x0800794d
 80078e0:	08007925 	.word	0x08007925
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	0800794d 	.word	0x0800794d
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	0800792d 	.word	0x0800792d
 8007904:	2301      	movs	r3, #1
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e22a      	b.n	8007d62 <UART_SetConfig+0x76e>
 800790c:	2304      	movs	r3, #4
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e226      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007914:	2308      	movs	r3, #8
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e222      	b.n	8007d62 <UART_SetConfig+0x76e>
 800791c:	2310      	movs	r3, #16
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e21e      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007924:	2320      	movs	r3, #32
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e21a      	b.n	8007d62 <UART_SetConfig+0x76e>
 800792c:	2340      	movs	r3, #64	@ 0x40
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e216      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007934:	08009524 	.word	0x08009524
 8007938:	cfff69f3 	.word	0xcfff69f3
 800793c:	58000c00 	.word	0x58000c00
 8007940:	11fff4ff 	.word	0x11fff4ff
 8007944:	40011000 	.word	0x40011000
 8007948:	58024400 	.word	0x58024400
 800794c:	2380      	movs	r3, #128	@ 0x80
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e206      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4ac3      	ldr	r2, [pc, #780]	@ (8007c68 <UART_SetConfig+0x674>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d130      	bne.n	80079c0 <UART_SetConfig+0x3cc>
 800795e:	4bc3      	ldr	r3, [pc, #780]	@ (8007c6c <UART_SetConfig+0x678>)
 8007960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b05      	cmp	r3, #5
 8007968:	d826      	bhi.n	80079b8 <UART_SetConfig+0x3c4>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <UART_SetConfig+0x37c>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007989 	.word	0x08007989
 8007974:	08007991 	.word	0x08007991
 8007978:	08007999 	.word	0x08007999
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079b1 	.word	0x080079b1
 8007988:	2300      	movs	r3, #0
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e1e8      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007996:	e1e4      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e1e0      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e1dc      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079a8:	2320      	movs	r3, #32
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e1d8      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079b0:	2340      	movs	r3, #64	@ 0x40
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e1d4      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079b8:	2380      	movs	r3, #128	@ 0x80
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e1d0      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4aaa      	ldr	r2, [pc, #680]	@ (8007c70 <UART_SetConfig+0x67c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d130      	bne.n	8007a2c <UART_SetConfig+0x438>
 80079ca:	4ba8      	ldr	r3, [pc, #672]	@ (8007c6c <UART_SetConfig+0x678>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d826      	bhi.n	8007a24 <UART_SetConfig+0x430>
 80079d6:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <UART_SetConfig+0x3e8>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e1b2      	b.n	8007d62 <UART_SetConfig+0x76e>
 80079fc:	2304      	movs	r3, #4
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e1ae      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a04:	2308      	movs	r3, #8
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0a:	e1aa      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a12:	e1a6      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a14:	2320      	movs	r3, #32
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e1a2      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a1c:	2340      	movs	r3, #64	@ 0x40
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e19e      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a24:	2380      	movs	r3, #128	@ 0x80
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e19a      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a90      	ldr	r2, [pc, #576]	@ (8007c74 <UART_SetConfig+0x680>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d130      	bne.n	8007a98 <UART_SetConfig+0x4a4>
 8007a36:	4b8d      	ldr	r3, [pc, #564]	@ (8007c6c <UART_SetConfig+0x678>)
 8007a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	2b05      	cmp	r3, #5
 8007a40:	d826      	bhi.n	8007a90 <UART_SetConfig+0x49c>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <UART_SetConfig+0x454>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a61 	.word	0x08007a61
 8007a4c:	08007a69 	.word	0x08007a69
 8007a50:	08007a71 	.word	0x08007a71
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a89 	.word	0x08007a89
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e17c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e178      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a70:	2308      	movs	r3, #8
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e174      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e170      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a80:	2320      	movs	r3, #32
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e16c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a88:	2340      	movs	r3, #64	@ 0x40
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e168      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a90:	2380      	movs	r3, #128	@ 0x80
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e164      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a76      	ldr	r2, [pc, #472]	@ (8007c78 <UART_SetConfig+0x684>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d130      	bne.n	8007b04 <UART_SetConfig+0x510>
 8007aa2:	4b72      	ldr	r3, [pc, #456]	@ (8007c6c <UART_SetConfig+0x678>)
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b05      	cmp	r3, #5
 8007aac:	d826      	bhi.n	8007afc <UART_SetConfig+0x508>
 8007aae:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <UART_SetConfig+0x4c0>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	08007add 	.word	0x08007add
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e146      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e142      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e13e      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e13a      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007aec:	2320      	movs	r3, #32
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e136      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007af4:	2340      	movs	r3, #64	@ 0x40
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e132      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007afc:	2380      	movs	r3, #128	@ 0x80
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e12e      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a5c      	ldr	r2, [pc, #368]	@ (8007c7c <UART_SetConfig+0x688>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d176      	bne.n	8007bfc <UART_SetConfig+0x608>
 8007b0e:	4b57      	ldr	r3, [pc, #348]	@ (8007c6c <UART_SetConfig+0x678>)
 8007b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b16:	2b28      	cmp	r3, #40	@ 0x28
 8007b18:	d86c      	bhi.n	8007bf4 <UART_SetConfig+0x600>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <UART_SetConfig+0x52c>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bf5 	.word	0x08007bf5
 8007b28:	08007bf5 	.word	0x08007bf5
 8007b2c:	08007bf5 	.word	0x08007bf5
 8007b30:	08007bf5 	.word	0x08007bf5
 8007b34:	08007bf5 	.word	0x08007bf5
 8007b38:	08007bf5 	.word	0x08007bf5
 8007b3c:	08007bf5 	.word	0x08007bf5
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007bf5 	.word	0x08007bf5
 8007b48:	08007bf5 	.word	0x08007bf5
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007bf5 	.word	0x08007bf5
 8007b54:	08007bf5 	.word	0x08007bf5
 8007b58:	08007bf5 	.word	0x08007bf5
 8007b5c:	08007bf5 	.word	0x08007bf5
 8007b60:	08007bd5 	.word	0x08007bd5
 8007b64:	08007bf5 	.word	0x08007bf5
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007bf5 	.word	0x08007bf5
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bf5 	.word	0x08007bf5
 8007b7c:	08007bf5 	.word	0x08007bf5
 8007b80:	08007bdd 	.word	0x08007bdd
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007bf5 	.word	0x08007bf5
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007be5 	.word	0x08007be5
 8007ba4:	08007bf5 	.word	0x08007bf5
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bf5 	.word	0x08007bf5
 8007bb0:	08007bf5 	.word	0x08007bf5
 8007bb4:	08007bf5 	.word	0x08007bf5
 8007bb8:	08007bf5 	.word	0x08007bf5
 8007bbc:	08007bf5 	.word	0x08007bf5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e0ca      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e0c6      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e0c2      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e0be      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007be4:	2320      	movs	r3, #32
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e0ba      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bec:	2340      	movs	r3, #64	@ 0x40
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e0b6      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bf4:	2380      	movs	r3, #128	@ 0x80
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e0b2      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1f      	ldr	r2, [pc, #124]	@ (8007c80 <UART_SetConfig+0x68c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d13e      	bne.n	8007c84 <UART_SetConfig+0x690>
 8007c06:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <UART_SetConfig+0x678>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d826      	bhi.n	8007c60 <UART_SetConfig+0x66c>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x624>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e094      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e090      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e08c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e088      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c50:	2320      	movs	r3, #32
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e084      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c58:	2340      	movs	r3, #64	@ 0x40
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e080      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c60:	2380      	movs	r3, #128	@ 0x80
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e07c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007c68:	40004400 	.word	0x40004400
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	40004800 	.word	0x40004800
 8007c74:	40004c00 	.word	0x40004c00
 8007c78:	40005000 	.word	0x40005000
 8007c7c:	40011400 	.word	0x40011400
 8007c80:	40007800 	.word	0x40007800
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4aae      	ldr	r2, [pc, #696]	@ (8007f44 <UART_SetConfig+0x950>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d130      	bne.n	8007cf0 <UART_SetConfig+0x6fc>
 8007c8e:	4bae      	ldr	r3, [pc, #696]	@ (8007f48 <UART_SetConfig+0x954>)
 8007c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d826      	bhi.n	8007ce8 <UART_SetConfig+0x6f4>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <UART_SetConfig+0x6ac>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb9 	.word	0x08007cb9
 8007ca4:	08007cc1 	.word	0x08007cc1
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e050      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e04c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007cc8:	2308      	movs	r3, #8
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e048      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e044      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007cd8:	2320      	movs	r3, #32
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e040      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007ce0:	2340      	movs	r3, #64	@ 0x40
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e03c      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007ce8:	2380      	movs	r3, #128	@ 0x80
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e038      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a95      	ldr	r2, [pc, #596]	@ (8007f4c <UART_SetConfig+0x958>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d130      	bne.n	8007d5c <UART_SetConfig+0x768>
 8007cfa:	4b93      	ldr	r3, [pc, #588]	@ (8007f48 <UART_SetConfig+0x954>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	d826      	bhi.n	8007d54 <UART_SetConfig+0x760>
 8007d06:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <UART_SetConfig+0x718>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d25 	.word	0x08007d25
 8007d10:	08007d2d 	.word	0x08007d2d
 8007d14:	08007d35 	.word	0x08007d35
 8007d18:	08007d3d 	.word	0x08007d3d
 8007d1c:	08007d45 	.word	0x08007d45
 8007d20:	08007d4d 	.word	0x08007d4d
 8007d24:	2302      	movs	r3, #2
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e01a      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e016      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d34:	2308      	movs	r3, #8
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e012      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e00e      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d44:	2320      	movs	r3, #32
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e00a      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d4c:	2340      	movs	r3, #64	@ 0x40
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e006      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d54:	2380      	movs	r3, #128	@ 0x80
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e002      	b.n	8007d62 <UART_SetConfig+0x76e>
 8007d5c:	2380      	movs	r3, #128	@ 0x80
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a79      	ldr	r2, [pc, #484]	@ (8007f4c <UART_SetConfig+0x958>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	f040 80f7 	bne.w	8007f5c <UART_SetConfig+0x968>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	dc46      	bgt.n	8007e04 <UART_SetConfig+0x810>
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	db75      	blt.n	8007e66 <UART_SetConfig+0x872>
 8007d7a:	3b02      	subs	r3, #2
 8007d7c:	2b1e      	cmp	r3, #30
 8007d7e:	d872      	bhi.n	8007e66 <UART_SetConfig+0x872>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x794>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007e0b 	.word	0x08007e0b
 8007d8c:	08007e67 	.word	0x08007e67
 8007d90:	08007e13 	.word	0x08007e13
 8007d94:	08007e67 	.word	0x08007e67
 8007d98:	08007e67 	.word	0x08007e67
 8007d9c:	08007e67 	.word	0x08007e67
 8007da0:	08007e23 	.word	0x08007e23
 8007da4:	08007e67 	.word	0x08007e67
 8007da8:	08007e67 	.word	0x08007e67
 8007dac:	08007e67 	.word	0x08007e67
 8007db0:	08007e67 	.word	0x08007e67
 8007db4:	08007e67 	.word	0x08007e67
 8007db8:	08007e67 	.word	0x08007e67
 8007dbc:	08007e67 	.word	0x08007e67
 8007dc0:	08007e33 	.word	0x08007e33
 8007dc4:	08007e67 	.word	0x08007e67
 8007dc8:	08007e67 	.word	0x08007e67
 8007dcc:	08007e67 	.word	0x08007e67
 8007dd0:	08007e67 	.word	0x08007e67
 8007dd4:	08007e67 	.word	0x08007e67
 8007dd8:	08007e67 	.word	0x08007e67
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007e67 	.word	0x08007e67
 8007de4:	08007e67 	.word	0x08007e67
 8007de8:	08007e67 	.word	0x08007e67
 8007dec:	08007e67 	.word	0x08007e67
 8007df0:	08007e67 	.word	0x08007e67
 8007df4:	08007e67 	.word	0x08007e67
 8007df8:	08007e67 	.word	0x08007e67
 8007dfc:	08007e67 	.word	0x08007e67
 8007e00:	08007e59 	.word	0x08007e59
 8007e04:	2b40      	cmp	r3, #64	@ 0x40
 8007e06:	d02a      	beq.n	8007e5e <UART_SetConfig+0x86a>
 8007e08:	e02d      	b.n	8007e66 <UART_SetConfig+0x872>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e0a:	f7fe fa45 	bl	8006298 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e10:	e02f      	b.n	8007e72 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fa54 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e20:	e027      	b.n	8007e72 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e22:	f107 0318 	add.w	r3, r7, #24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fba0 	bl	800656c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e01f      	b.n	8007e72 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e32:	4b45      	ldr	r3, [pc, #276]	@ (8007f48 <UART_SetConfig+0x954>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <UART_SetConfig+0x85e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e3e:	4b42      	ldr	r3, [pc, #264]	@ (8007f48 <UART_SetConfig+0x954>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	08db      	lsrs	r3, r3, #3
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	4a41      	ldr	r2, [pc, #260]	@ (8007f50 <UART_SetConfig+0x95c>)
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e50:	e00f      	b.n	8007e72 <UART_SetConfig+0x87e>
          pclk = (uint32_t) HSI_VALUE;
 8007e52:	4b3f      	ldr	r3, [pc, #252]	@ (8007f50 <UART_SetConfig+0x95c>)
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e56:	e00c      	b.n	8007e72 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e58:	4b3e      	ldr	r3, [pc, #248]	@ (8007f54 <UART_SetConfig+0x960>)
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x87e>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 81e3 	beq.w	8008240 <UART_SetConfig+0xc4c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	4a36      	ldr	r2, [pc, #216]	@ (8007f58 <UART_SetConfig+0x964>)
 8007e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d305      	bcc.n	8007eaa <UART_SetConfig+0x8b6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d903      	bls.n	8007eb2 <UART_SetConfig+0x8be>
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007eb0:	e1c6      	b.n	8008240 <UART_SetConfig+0xc4c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	60bb      	str	r3, [r7, #8]
 8007eb8:	60fa      	str	r2, [r7, #12]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	4a26      	ldr	r2, [pc, #152]	@ (8007f58 <UART_SetConfig+0x964>)
 8007ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ed4:	f7f8 fa00 	bl	80002d8 <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	020b      	lsls	r3, r1, #8
 8007eea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eee:	0202      	lsls	r2, r0, #8
 8007ef0:	6979      	ldr	r1, [r7, #20]
 8007ef2:	6849      	ldr	r1, [r1, #4]
 8007ef4:	0849      	lsrs	r1, r1, #1
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	4605      	mov	r5, r0
 8007efc:	eb12 0804 	adds.w	r8, r2, r4
 8007f00:	eb43 0905 	adc.w	r9, r3, r5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	469a      	mov	sl, r3
 8007f0c:	4693      	mov	fp, r2
 8007f0e:	4652      	mov	r2, sl
 8007f10:	465b      	mov	r3, fp
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 f9df 	bl	80002d8 <__aeabi_uldivmod>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4613      	mov	r3, r2
 8007f20:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f28:	d308      	bcc.n	8007f3c <UART_SetConfig+0x948>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f30:	d204      	bcs.n	8007f3c <UART_SetConfig+0x948>
        {
          huart->Instance->BRR = usartdiv;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	e181      	b.n	8008240 <UART_SetConfig+0xc4c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f42:	e17d      	b.n	8008240 <UART_SetConfig+0xc4c>
 8007f44:	40007c00 	.word	0x40007c00
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	58000c00 	.word	0x58000c00
 8007f50:	03d09000 	.word	0x03d09000
 8007f54:	003d0900 	.word	0x003d0900
 8007f58:	080095ac 	.word	0x080095ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f64:	f040 80be 	bne.w	80080e4 <UART_SetConfig+0xaf0>
  {
    switch (clocksource)
 8007f68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	dc49      	bgt.n	8008004 <UART_SetConfig+0xa10>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db7c      	blt.n	800806e <UART_SetConfig+0xa7a>
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d87a      	bhi.n	800806e <UART_SetConfig+0xa7a>
 8007f78:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <UART_SetConfig+0x98c>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	0800800b 	.word	0x0800800b
 8007f84:	08008013 	.word	0x08008013
 8007f88:	0800806f 	.word	0x0800806f
 8007f8c:	0800806f 	.word	0x0800806f
 8007f90:	0800801b 	.word	0x0800801b
 8007f94:	0800806f 	.word	0x0800806f
 8007f98:	0800806f 	.word	0x0800806f
 8007f9c:	0800806f 	.word	0x0800806f
 8007fa0:	0800802b 	.word	0x0800802b
 8007fa4:	0800806f 	.word	0x0800806f
 8007fa8:	0800806f 	.word	0x0800806f
 8007fac:	0800806f 	.word	0x0800806f
 8007fb0:	0800806f 	.word	0x0800806f
 8007fb4:	0800806f 	.word	0x0800806f
 8007fb8:	0800806f 	.word	0x0800806f
 8007fbc:	0800806f 	.word	0x0800806f
 8007fc0:	0800803b 	.word	0x0800803b
 8007fc4:	0800806f 	.word	0x0800806f
 8007fc8:	0800806f 	.word	0x0800806f
 8007fcc:	0800806f 	.word	0x0800806f
 8007fd0:	0800806f 	.word	0x0800806f
 8007fd4:	0800806f 	.word	0x0800806f
 8007fd8:	0800806f 	.word	0x0800806f
 8007fdc:	0800806f 	.word	0x0800806f
 8007fe0:	0800806f 	.word	0x0800806f
 8007fe4:	0800806f 	.word	0x0800806f
 8007fe8:	0800806f 	.word	0x0800806f
 8007fec:	0800806f 	.word	0x0800806f
 8007ff0:	0800806f 	.word	0x0800806f
 8007ff4:	0800806f 	.word	0x0800806f
 8007ff8:	0800806f 	.word	0x0800806f
 8007ffc:	0800806f 	.word	0x0800806f
 8008000:	08008061 	.word	0x08008061
 8008004:	2b40      	cmp	r3, #64	@ 0x40
 8008006:	d02e      	beq.n	8008066 <UART_SetConfig+0xa72>
 8008008:	e031      	b.n	800806e <UART_SetConfig+0xa7a>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800800a:	f7fc fbe9 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800800e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008010:	e033      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008012:	f7fc fbfb 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8008016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008018:	e02f      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800801a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe f950 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008028:	e027      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800802a:	f107 0318 	add.w	r3, r7, #24
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fa9c 	bl	800656c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008038:	e01f      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800803a:	4b8c      	ldr	r3, [pc, #560]	@ (800826c <UART_SetConfig+0xc78>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d009      	beq.n	800805a <UART_SetConfig+0xa66>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008046:	4b89      	ldr	r3, [pc, #548]	@ (800826c <UART_SetConfig+0xc78>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	08db      	lsrs	r3, r3, #3
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	4a87      	ldr	r2, [pc, #540]	@ (8008270 <UART_SetConfig+0xc7c>)
 8008052:	fa22 f303 	lsr.w	r3, r2, r3
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008058:	e00f      	b.n	800807a <UART_SetConfig+0xa86>
          pclk = (uint32_t) HSI_VALUE;
 800805a:	4b85      	ldr	r3, [pc, #532]	@ (8008270 <UART_SetConfig+0xc7c>)
 800805c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805e:	e00c      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008060:	4b84      	ldr	r3, [pc, #528]	@ (8008274 <UART_SetConfig+0xc80>)
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0xa86>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800807a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80df 	beq.w	8008240 <UART_SetConfig+0xc4c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	4a7c      	ldr	r2, [pc, #496]	@ (8008278 <UART_SetConfig+0xc84>)
 8008088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808c:	461a      	mov	r2, r3
 800808e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008090:	fbb3 f3f2 	udiv	r3, r3, r2
 8008094:	005a      	lsls	r2, r3, #1
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	441a      	add	r2, r3
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d916      	bls.n	80080dc <UART_SetConfig+0xae8>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d212      	bcs.n	80080dc <UART_SetConfig+0xae8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f023 030f 	bic.w	r3, r3, #15
 80080be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080ce:	4313      	orrs	r3, r2
 80080d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	e0b1      	b.n	8008240 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080e2:	e0ad      	b.n	8008240 <UART_SetConfig+0xc4c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	dc49      	bgt.n	8008180 <UART_SetConfig+0xb8c>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	db7c      	blt.n	80081ea <UART_SetConfig+0xbf6>
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d87a      	bhi.n	80081ea <UART_SetConfig+0xbf6>
 80080f4:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <UART_SetConfig+0xb08>)
 80080f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fa:	bf00      	nop
 80080fc:	08008187 	.word	0x08008187
 8008100:	0800818f 	.word	0x0800818f
 8008104:	080081eb 	.word	0x080081eb
 8008108:	080081eb 	.word	0x080081eb
 800810c:	08008197 	.word	0x08008197
 8008110:	080081eb 	.word	0x080081eb
 8008114:	080081eb 	.word	0x080081eb
 8008118:	080081eb 	.word	0x080081eb
 800811c:	080081a7 	.word	0x080081a7
 8008120:	080081eb 	.word	0x080081eb
 8008124:	080081eb 	.word	0x080081eb
 8008128:	080081eb 	.word	0x080081eb
 800812c:	080081eb 	.word	0x080081eb
 8008130:	080081eb 	.word	0x080081eb
 8008134:	080081eb 	.word	0x080081eb
 8008138:	080081eb 	.word	0x080081eb
 800813c:	080081b7 	.word	0x080081b7
 8008140:	080081eb 	.word	0x080081eb
 8008144:	080081eb 	.word	0x080081eb
 8008148:	080081eb 	.word	0x080081eb
 800814c:	080081eb 	.word	0x080081eb
 8008150:	080081eb 	.word	0x080081eb
 8008154:	080081eb 	.word	0x080081eb
 8008158:	080081eb 	.word	0x080081eb
 800815c:	080081eb 	.word	0x080081eb
 8008160:	080081eb 	.word	0x080081eb
 8008164:	080081eb 	.word	0x080081eb
 8008168:	080081eb 	.word	0x080081eb
 800816c:	080081eb 	.word	0x080081eb
 8008170:	080081eb 	.word	0x080081eb
 8008174:	080081eb 	.word	0x080081eb
 8008178:	080081eb 	.word	0x080081eb
 800817c:	080081dd 	.word	0x080081dd
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	d02e      	beq.n	80081e2 <UART_SetConfig+0xbee>
 8008184:	e031      	b.n	80081ea <UART_SetConfig+0xbf6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008186:	f7fc fb2b 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800818a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800818c:	e033      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800818e:	f7fc fb3d 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8008192:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008194:	e02f      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe f892 	bl	80062c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e027      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a6:	f107 0318 	add.w	r3, r7, #24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe f9de 	bl	800656c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b4:	e01f      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b6:	4b2d      	ldr	r3, [pc, #180]	@ (800826c <UART_SetConfig+0xc78>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <UART_SetConfig+0xbe2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081c2:	4b2a      	ldr	r3, [pc, #168]	@ (800826c <UART_SetConfig+0xc78>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	08db      	lsrs	r3, r3, #3
 80081c8:	f003 0303 	and.w	r3, r3, #3
 80081cc:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <UART_SetConfig+0xc7c>)
 80081ce:	fa22 f303 	lsr.w	r3, r2, r3
 80081d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081d4:	e00f      	b.n	80081f6 <UART_SetConfig+0xc02>
          pclk = (uint32_t) HSI_VALUE;
 80081d6:	4b26      	ldr	r3, [pc, #152]	@ (8008270 <UART_SetConfig+0xc7c>)
 80081d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081da:	e00c      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081dc:	4b25      	ldr	r3, [pc, #148]	@ (8008274 <UART_SetConfig+0xc80>)
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e0:	e009      	b.n	80081f6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e8:	e005      	b.n	80081f6 <UART_SetConfig+0xc02>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081f4:	bf00      	nop
    }

    if (pclk != 0U)
 80081f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d021      	beq.n	8008240 <UART_SetConfig+0xc4c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008200:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <UART_SetConfig+0xc84>)
 8008202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008206:	461a      	mov	r2, r3
 8008208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820a:	fbb3 f2f2 	udiv	r2, r3, r2
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	441a      	add	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	fbb2 f3f3 	udiv	r3, r2, r3
 800821e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	2b0f      	cmp	r3, #15
 8008224:	d909      	bls.n	800823a <UART_SetConfig+0xc46>
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822c:	d205      	bcs.n	800823a <UART_SetConfig+0xc46>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	b29a      	uxth	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e002      	b.n	8008240 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2201      	movs	r2, #1
 8008244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2200      	movs	r2, #0
 8008254:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2200      	movs	r2, #0
 800825a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800825c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008260:	4618      	mov	r0, r3
 8008262:	3748      	adds	r7, #72	@ 0x48
 8008264:	46bd      	mov	sp, r7
 8008266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800826a:	bf00      	nop
 800826c:	58024400 	.word	0x58024400
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
 8008278:	080095ac 	.word	0x080095ac

0800827c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	2bff      	cmp	r3, #255	@ 0xff
 800828a:	d904      	bls.n	8008296 <UART_AdvFeatureConfig+0x1a>
 800828c:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8008290:	4893      	ldr	r0, [pc, #588]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 8008292:	f7f8 fc55 	bl	8000b40 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d018      	beq.n	80082d4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <UART_AdvFeatureConfig+0x42>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b2:	d004      	beq.n	80082be <UART_AdvFeatureConfig+0x42>
 80082b4:	f640 41cc 	movw	r1, #3276	@ 0xccc
 80082b8:	4889      	ldr	r0, [pc, #548]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 80082ba:	f7f8 fc41 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d018      	beq.n	8008312 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <UART_AdvFeatureConfig+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f0:	d004      	beq.n	80082fc <UART_AdvFeatureConfig+0x80>
 80082f2:	f640 41d3 	movw	r1, #3283	@ 0xcd3
 80082f6:	487a      	ldr	r0, [pc, #488]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 80082f8:	f7f8 fc22 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d018      	beq.n	8008350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <UART_AdvFeatureConfig+0xbe>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832e:	d004      	beq.n	800833a <UART_AdvFeatureConfig+0xbe>
 8008330:	f640 41da 	movw	r1, #3290	@ 0xcda
 8008334:	486a      	ldr	r0, [pc, #424]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 8008336:	f7f8 fc03 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d018      	beq.n	800838e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <UART_AdvFeatureConfig+0xfc>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008368:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800836c:	d004      	beq.n	8008378 <UART_AdvFeatureConfig+0xfc>
 800836e:	f640 41e1 	movw	r1, #3297	@ 0xce1
 8008372:	485b      	ldr	r0, [pc, #364]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 8008374:	f7f8 fbe4 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b00      	cmp	r3, #0
 8008398:	d018      	beq.n	80083cc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <UART_AdvFeatureConfig+0x13a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083aa:	d004      	beq.n	80083b6 <UART_AdvFeatureConfig+0x13a>
 80083ac:	f640 41e8 	movw	r1, #3304	@ 0xce8
 80083b0:	484b      	ldr	r0, [pc, #300]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 80083b2:	f7f8 fbc5 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d018      	beq.n	800840a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d009      	beq.n	80083f4 <UART_AdvFeatureConfig+0x178>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083e8:	d004      	beq.n	80083f4 <UART_AdvFeatureConfig+0x178>
 80083ea:	f640 41ef 	movw	r1, #3311	@ 0xcef
 80083ee:	483c      	ldr	r0, [pc, #240]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 80083f0:	f7f8 fba6 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8081 	beq.w	800851a <UART_AdvFeatureConfig+0x29e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a31      	ldr	r2, [pc, #196]	@ (80084e4 <UART_AdvFeatureConfig+0x268>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d027      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a30      	ldr	r2, [pc, #192]	@ (80084e8 <UART_AdvFeatureConfig+0x26c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d022      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2e      	ldr	r2, [pc, #184]	@ (80084ec <UART_AdvFeatureConfig+0x270>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01d      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a2d      	ldr	r2, [pc, #180]	@ (80084f0 <UART_AdvFeatureConfig+0x274>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d018      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2b      	ldr	r2, [pc, #172]	@ (80084f4 <UART_AdvFeatureConfig+0x278>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a2a      	ldr	r2, [pc, #168]	@ (80084f8 <UART_AdvFeatureConfig+0x27c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00e      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a28      	ldr	r2, [pc, #160]	@ (80084fc <UART_AdvFeatureConfig+0x280>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a27      	ldr	r2, [pc, #156]	@ (8008500 <UART_AdvFeatureConfig+0x284>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d004      	beq.n	8008472 <UART_AdvFeatureConfig+0x1f6>
 8008468:	f640 41f6 	movw	r1, #3318	@ 0xcf6
 800846c:	481c      	ldr	r0, [pc, #112]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 800846e:	f7f8 fb67 	bl	8000b40 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <UART_AdvFeatureConfig+0x212>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008482:	d004      	beq.n	800848e <UART_AdvFeatureConfig+0x212>
 8008484:	f640 41f7 	movw	r1, #3319	@ 0xcf7
 8008488:	4815      	ldr	r0, [pc, #84]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 800848a:	f7f8 fb59 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ac:	d135      	bne.n	800851a <UART_AdvFeatureConfig+0x29e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d026      	beq.n	8008504 <UART_AdvFeatureConfig+0x288>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084be:	d021      	beq.n	8008504 <UART_AdvFeatureConfig+0x288>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c8:	d01c      	beq.n	8008504 <UART_AdvFeatureConfig+0x288>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084d2:	d017      	beq.n	8008504 <UART_AdvFeatureConfig+0x288>
 80084d4:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 80084d8:	4801      	ldr	r0, [pc, #4]	@ (80084e0 <UART_AdvFeatureConfig+0x264>)
 80084da:	f7f8 fb31 	bl	8000b40 <assert_failed>
 80084de:	e011      	b.n	8008504 <UART_AdvFeatureConfig+0x288>
 80084e0:	08009524 	.word	0x08009524
 80084e4:	40011000 	.word	0x40011000
 80084e8:	40004400 	.word	0x40004400
 80084ec:	40004800 	.word	0x40004800
 80084f0:	40004c00 	.word	0x40004c00
 80084f4:	40005000 	.word	0x40005000
 80084f8:	40011400 	.word	0x40011400
 80084fc:	40007800 	.word	0x40007800
 8008500:	40007c00 	.word	0x40007c00
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d018      	beq.n	8008558 <UART_AdvFeatureConfig+0x2dc>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <UART_AdvFeatureConfig+0x2c6>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008532:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008536:	d004      	beq.n	8008542 <UART_AdvFeatureConfig+0x2c6>
 8008538:	f640 5104 	movw	r1, #3332	@ 0xd04
 800853c:	4808      	ldr	r0, [pc, #32]	@ (8008560 <UART_AdvFeatureConfig+0x2e4>)
 800853e:	f7f8 faff 	bl	8000b40 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	605a      	str	r2, [r3, #4]
  }
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	08009524 	.word	0x08009524

08008564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b098      	sub	sp, #96	@ 0x60
 8008568:	af02      	add	r7, sp, #8
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008574:	f7f8 fec8 	bl	8001308 <HAL_GetTick>
 8008578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d12f      	bne.n	80085e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008590:	2200      	movs	r2, #0
 8008592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f88e 	bl	80086b8 <UART_WaitOnFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d022      	beq.n	80085e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e6      	bne.n	80085a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e063      	b.n	80086b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d149      	bne.n	800868a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085fe:	2200      	movs	r2, #0
 8008600:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f857 	bl	80086b8 <UART_WaitOnFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d03c      	beq.n	800868a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	623b      	str	r3, [r7, #32]
   return(result);
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800862e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008630:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e6      	bne.n	8008610 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60fb      	str	r3, [r7, #12]
   return(result);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 0301 	bic.w	r3, r3, #1
 8008658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008662:	61fa      	str	r2, [r7, #28]
 8008664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	69b9      	ldr	r1, [r7, #24]
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	617b      	str	r3, [r7, #20]
   return(result);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e012      	b.n	80086b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3758      	adds	r7, #88	@ 0x58
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c8:	e04f      	b.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d04b      	beq.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d2:	f7f8 fe19 	bl	8001308 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e04e      	b.n	800878a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d037      	beq.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b80      	cmp	r3, #128	@ 0x80
 80086fe:	d034      	beq.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b40      	cmp	r3, #64	@ 0x40
 8008704:	d031      	beq.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b08      	cmp	r3, #8
 8008712:	d110      	bne.n	8008736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2208      	movs	r2, #8
 800871a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f839 	bl	8008794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2208      	movs	r2, #8
 8008726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e029      	b.n	800878a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008744:	d111      	bne.n	800876a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800874e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f81f 	bl	8008794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e00f      	b.n	800878a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4013      	ands	r3, r2
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	429a      	cmp	r2, r3
 8008786:	d0a0      	beq.n	80086ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b095      	sub	sp, #84	@ 0x54
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80087bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e6      	bne.n	800879c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	4b1e      	ldr	r3, [pc, #120]	@ (800885c <UART_EndRxTransfer+0xc8>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008806:	2b01      	cmp	r3, #1
 8008808:	d118      	bne.n	800883c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	60bb      	str	r3, [r7, #8]
   return(result);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f023 0310 	bic.w	r3, r3, #16
 800881e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6979      	ldr	r1, [r7, #20]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	613b      	str	r3, [r7, #16]
   return(result);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e6      	bne.n	800880a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008850:	bf00      	nop
 8008852:	3754      	adds	r7, #84	@ 0x54
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	effffffe 	.word	0xeffffffe

08008860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7fe fea2 	bl	80075c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6979      	ldr	r1, [r7, #20]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	613b      	str	r3, [r7, #16]
   return(result);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe fe6d 	bl	80075b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3720      	adds	r7, #32
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2e      	ldr	r2, [pc, #184]	@ (80089e8 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d027      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2d      	ldr	r2, [pc, #180]	@ (80089ec <HAL_UARTEx_DisableFifoMode+0xcc>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d022      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2b      	ldr	r2, [pc, #172]	@ (80089f0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d01d      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2a      	ldr	r2, [pc, #168]	@ (80089f4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d018      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a28      	ldr	r2, [pc, #160]	@ (80089f8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d013      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a27      	ldr	r2, [pc, #156]	@ (80089fc <HAL_UARTEx_DisableFifoMode+0xdc>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00e      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a25      	ldr	r2, [pc, #148]	@ (8008a00 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d009      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a24      	ldr	r2, [pc, #144]	@ (8008a04 <HAL_UARTEx_DisableFifoMode+0xe4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d004      	beq.n	8008982 <HAL_UARTEx_DisableFifoMode+0x62>
 8008978:	f240 2136 	movw	r1, #566	@ 0x236
 800897c:	4822      	ldr	r0, [pc, #136]	@ (8008a08 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800897e:	f7f8 f8df 	bl	8000b40 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_UARTEx_DisableFifoMode+0x70>
 800898c:	2302      	movs	r3, #2
 800898e:	e027      	b.n	80089e0 <HAL_UARTEx_DisableFifoMode+0xc0>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2224      	movs	r2, #36	@ 0x24
 800899c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0201 	bic.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40011000 	.word	0x40011000
 80089ec:	40004400 	.word	0x40004400
 80089f0:	40004800 	.word	0x40004800
 80089f4:	40004c00 	.word	0x40004c00
 80089f8:	40005000 	.word	0x40005000
 80089fc:	40011400 	.word	0x40011400
 8008a00:	40007800 	.word	0x40007800
 8008a04:	40007c00 	.word	0x40007c00
 8008a08:	08009560 	.word	0x08009560

08008a0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a40      	ldr	r2, [pc, #256]	@ (8008b1c <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d027      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a3e      	ldr	r2, [pc, #248]	@ (8008b20 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d022      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008b24 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d01d      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a3b      	ldr	r2, [pc, #236]	@ (8008b28 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d018      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a3a      	ldr	r2, [pc, #232]	@ (8008b2c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a38      	ldr	r2, [pc, #224]	@ (8008b30 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00e      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a37      	ldr	r2, [pc, #220]	@ (8008b34 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a35      	ldr	r2, [pc, #212]	@ (8008b38 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008a66:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8008a6a:	4834      	ldr	r0, [pc, #208]	@ (8008b3c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8008a6c:	f7f8 f868 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d018      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7c:	d014      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a84:	d010      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008a8c:	d00c      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a94:	d008      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8008a9c:	d004      	beq.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008a9e:	f240 2165 	movw	r1, #613	@ 0x265
 8008aa2:	4826      	ldr	r0, [pc, #152]	@ (8008b3c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8008aa4:	f7f8 f84c 	bl	8000b40 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e02d      	b.n	8008b12 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2224      	movs	r2, #36	@ 0x24
 8008ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0201 	bic.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8be 	bl	8008c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40011000 	.word	0x40011000
 8008b20:	40004400 	.word	0x40004400
 8008b24:	40004800 	.word	0x40004800
 8008b28:	40004c00 	.word	0x40004c00
 8008b2c:	40005000 	.word	0x40005000
 8008b30:	40011400 	.word	0x40011400
 8008b34:	40007800 	.word	0x40007800
 8008b38:	40007c00 	.word	0x40007c00
 8008b3c:	08009560 	.word	0x08009560

08008b40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a40      	ldr	r2, [pc, #256]	@ (8008c50 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d027      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a3e      	ldr	r2, [pc, #248]	@ (8008c54 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d022      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a3d      	ldr	r2, [pc, #244]	@ (8008c58 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01d      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8008c5c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d018      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a3a      	ldr	r2, [pc, #232]	@ (8008c60 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a38      	ldr	r2, [pc, #224]	@ (8008c64 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00e      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a37      	ldr	r2, [pc, #220]	@ (8008c68 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a35      	ldr	r2, [pc, #212]	@ (8008c6c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008b9a:	f240 2195 	movw	r1, #661	@ 0x295
 8008b9e:	4834      	ldr	r0, [pc, #208]	@ (8008c70 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8008ba0:	f7f7 ffce 	bl	8000b40 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb0:	d014      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bb8:	d010      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8008bc0:	d00c      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bc8:	d008      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8008bd0:	d004      	beq.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008bd2:	f240 2196 	movw	r1, #662	@ 0x296
 8008bd6:	4826      	ldr	r0, [pc, #152]	@ (8008c70 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8008bd8:	f7f7 ffb2 	bl	8000b40 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e02d      	b.n	8008c46 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2224      	movs	r2, #36	@ 0x24
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f824 	bl	8008c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	40011000 	.word	0x40011000
 8008c54:	40004400 	.word	0x40004400
 8008c58:	40004800 	.word	0x40004800
 8008c5c:	40004c00 	.word	0x40004c00
 8008c60:	40005000 	.word	0x40005000
 8008c64:	40011400 	.word	0x40011400
 8008c68:	40007800 	.word	0x40007800
 8008c6c:	40007c00 	.word	0x40007c00
 8008c70:	08009560 	.word	0x08009560

08008c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d108      	bne.n	8008c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c94:	e031      	b.n	8008cfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c96:	2310      	movs	r3, #16
 8008c98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	0e5b      	lsrs	r3, r3, #25
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	0f5b      	lsrs	r3, r3, #29
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	7b3a      	ldrb	r2, [r7, #12]
 8008cc2:	4911      	ldr	r1, [pc, #68]	@ (8008d08 <UARTEx_SetNbDataToProcess+0x94>)
 8008cc4:	5c8a      	ldrb	r2, [r1, r2]
 8008cc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cca:	7b3a      	ldrb	r2, [r7, #12]
 8008ccc:	490f      	ldr	r1, [pc, #60]	@ (8008d0c <UARTEx_SetNbDataToProcess+0x98>)
 8008cce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	7b7a      	ldrb	r2, [r7, #13]
 8008ce0:	4909      	ldr	r1, [pc, #36]	@ (8008d08 <UARTEx_SetNbDataToProcess+0x94>)
 8008ce2:	5c8a      	ldrb	r2, [r1, r2]
 8008ce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ce8:	7b7a      	ldrb	r2, [r7, #13]
 8008cea:	4908      	ldr	r1, [pc, #32]	@ (8008d0c <UARTEx_SetNbDataToProcess+0x98>)
 8008cec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	080095c4 	.word	0x080095c4
 8008d0c:	080095cc 	.word	0x080095cc

08008d10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d10:	b084      	sub	sp, #16
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	f107 001c 	add.w	r0, r7, #28
 8008d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d121      	bne.n	8008d6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008dec <USB_CoreInit+0xdc>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d105      	bne.n	8008d62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 faaa 	bl	80092bc <USB_CoreReset>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]
 8008d6c:	e01b      	b.n	8008da6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa9e 	bl	80092bc <USB_CoreReset>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d98:	e005      	b.n	8008da6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008da6:	7fbb      	ldrb	r3, [r7, #30]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d116      	bne.n	8008dda <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <USB_CoreInit+0xe0>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f043 0206 	orr.w	r2, r3, #6
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f043 0220 	orr.w	r2, r3, #32
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de6:	b004      	add	sp, #16
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	ffbdffbf 	.word	0xffbdffbf
 8008df0:	03ee0000 	.word	0x03ee0000

08008df4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f023 0201 	bic.w	r2, r3, #1
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d115      	bne.n	8008e64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e44:	200a      	movs	r0, #10
 8008e46:	f7f8 fa6b 	bl	8001320 <HAL_Delay>
      ms += 10U;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	330a      	adds	r3, #10
 8008e4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fa25 	bl	80092a0 <USB_GetMode>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d01e      	beq.n	8008e9a <USB_SetCurrentMode+0x84>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e60:	d9f0      	bls.n	8008e44 <USB_SetCurrentMode+0x2e>
 8008e62:	e01a      	b.n	8008e9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d115      	bne.n	8008e96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e76:	200a      	movs	r0, #10
 8008e78:	f7f8 fa52 	bl	8001320 <HAL_Delay>
      ms += 10U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	330a      	adds	r3, #10
 8008e80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa0c 	bl	80092a0 <USB_GetMode>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <USB_SetCurrentMode+0x84>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e92:	d9f0      	bls.n	8008e76 <USB_SetCurrentMode+0x60>
 8008e94:	e001      	b.n	8008e9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e005      	b.n	8008ea6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8008e9e:	d101      	bne.n	8008ea4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b086      	sub	sp, #24
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	e009      	b.n	8008ee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	3340      	adds	r3, #64	@ 0x40
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b0e      	cmp	r3, #14
 8008ee8:	d9f2      	bls.n	8008ed0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11c      	bne.n	8008f2c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f00:	f043 0302 	orr.w	r3, r3, #2
 8008f04:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e005      	b.n	8008f38 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f3e:	461a      	mov	r2, r3
 8008f40:	2300      	movs	r3, #0
 8008f42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d10d      	bne.n	8008f68 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f968 	bl	800922c <USB_SetDevSpeed>
 8008f5c:	e008      	b.n	8008f70 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f963 	bl	800922c <USB_SetDevSpeed>
 8008f66:	e003      	b.n	8008f70 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f68:	2103      	movs	r1, #3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f95e 	bl	800922c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f70:	2110      	movs	r1, #16
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f8fa 	bl	800916c <USB_FlushTxFifo>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f924 	bl	80091d0 <USB_FlushRxFifo>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f98:	461a      	mov	r2, r3
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	e043      	b.n	8009044 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd2:	d118      	bne.n	8009006 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10a      	bne.n	8008ff0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	e013      	b.n	8009018 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e008      	b.n	8009018 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009012:	461a      	mov	r2, r3
 8009014:	2300      	movs	r3, #0
 8009016:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	461a      	mov	r2, r3
 8009026:	2300      	movs	r3, #0
 8009028:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009036:	461a      	mov	r2, r3
 8009038:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800903c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3301      	adds	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009048:	461a      	mov	r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	4293      	cmp	r3, r2
 800904e:	d3b5      	bcc.n	8008fbc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	e043      	b.n	80090de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800906c:	d118      	bne.n	80090a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009080:	461a      	mov	r2, r3
 8009082:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	e013      	b.n	80090b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009096:	461a      	mov	r2, r3
 8009098:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	e008      	b.n	80090b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ac:	461a      	mov	r2, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090be:	461a      	mov	r2, r3
 80090c0:	2300      	movs	r3, #0
 80090c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d0:	461a      	mov	r2, r3
 80090d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	3301      	adds	r3, #1
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090e2:	461a      	mov	r2, r3
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d3b5      	bcc.n	8009056 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800910a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800910c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	f043 0210 	orr.w	r2, r3, #16
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	4b0f      	ldr	r3, [pc, #60]	@ (8009164 <USB_DevInit+0x2b4>)
 8009126:	4313      	orrs	r3, r2
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800912c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f043 0208 	orr.w	r2, r3, #8
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009144:	2b01      	cmp	r3, #1
 8009146:	d105      	bne.n	8009154 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <USB_DevInit+0x2b8>)
 800914e:	4313      	orrs	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009154:	7dfb      	ldrb	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009160:	b004      	add	sp, #16
 8009162:	4770      	bx	lr
 8009164:	803c3800 	.word	0x803c3800
 8009168:	40000004 	.word	0x40000004

0800916c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009186:	d901      	bls.n	800918c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e01b      	b.n	80091c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	daf2      	bge.n	800917a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	019b      	lsls	r3, r3, #6
 800919c:	f043 0220 	orr.w	r2, r3, #32
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091b0:	d901      	bls.n	80091b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e006      	b.n	80091c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d0f0      	beq.n	80091a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091e8:	d901      	bls.n	80091ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e018      	b.n	8009220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	daf2      	bge.n	80091dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2210      	movs	r2, #16
 80091fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800920c:	d901      	bls.n	8009212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e006      	b.n	8009220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0310 	and.w	r3, r3, #16
 800921a:	2b10      	cmp	r3, #16
 800921c:	d0f0      	beq.n	8009200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800924c:	4313      	orrs	r3, r2
 800924e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	f003 0301 	and.w	r3, r3, #1
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092d4:	d901      	bls.n	80092da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e01b      	b.n	8009312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	daf2      	bge.n	80092c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f043 0201 	orr.w	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092fe:	d901      	bls.n	8009304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e006      	b.n	8009312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b01      	cmp	r3, #1
 800930e:	d0f0      	beq.n	80092f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <memset>:
 800931e:	4402      	add	r2, r0
 8009320:	4603      	mov	r3, r0
 8009322:	4293      	cmp	r3, r2
 8009324:	d100      	bne.n	8009328 <memset+0xa>
 8009326:	4770      	bx	lr
 8009328:	f803 1b01 	strb.w	r1, [r3], #1
 800932c:	e7f9      	b.n	8009322 <memset+0x4>
	...

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4d0d      	ldr	r5, [pc, #52]	@ (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	@ (800936c <__libc_init_array+0x3c>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2600      	movs	r6, #0
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4d0b      	ldr	r5, [pc, #44]	@ (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	@ (8009374 <__libc_init_array+0x44>)
 8009344:	f000 f818 	bl	8009378 <_init>
 8009348:	1b64      	subs	r4, r4, r5
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2600      	movs	r6, #0
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	080095dc 	.word	0x080095dc
 800936c:	080095dc 	.word	0x080095dc
 8009370:	080095dc 	.word	0x080095dc
 8009374:	080095e0 	.word	0x080095e0

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
